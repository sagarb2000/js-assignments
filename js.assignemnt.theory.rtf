{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}{\f2\fnil\fcharset0 Cambria Math;}}
{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\kerning24\b\f0\fs40 Q.1 What is JavaScript. How to use it? \b0\par

\pard\qj\fs24 JavaScript is\~a text-based programming language used both on the client-side and server-side that allows you to make web pages interactive. Where HTML and CSS are languages that give structure and style to web pages, JavaScript gives web pages interactive elements that engage a user\par
\par
\b\fs32  Q.2 How many type of Variable in JavaScript? \par

\pard\b0\fs28 There are two types of variables in JavaScript local variable and global variable. There are some rules while declaring a JavaScript variable (also known as identifiers\par
\lang16393\par
\b\fs32\lang1033   Q.3 Define a Data Types in js?\par
\b0\fs28    Data types in JavaScript\~define the data type that a variable can store. JavaScript includes primitive and non-primitive data types. The primitive data types in JavaScript include string, number, boolean, undefined, null, and symbol. The non-primitive data type includes the object.\lang16393 13 Sept 2023\par
\fs32\par
\b\lang1033 Q.4 Write a mul Function Which will Work Properly When invoked With Following Syntax.\fs80  \par
\b0\fs28\lang16393\par

\pard\sa200\sl276\slmult1\lang1033 The MUL function is a miniature of the multiplication function. In this function, we call the function that required an argument as a first number, and that function calls another function that required another argument and this step goes on. \par
\par
The first function\rquote s argument is x, the second function`s argument is y and the third is z, so the return value will be xyz.\par
\par
Syntax:\par
\par
function mul(x) \{\par
  return function (y) \{\par
    return function (z) \{\par
      return x * y * z;\par
    \};\par
  \};\par
\}\par
Example: Below example illustrates the MUL() function in JavaScript.\par
\b\line Q.5 What the deference between undefined and undeclare in JavaScript?\par
\b0 Undefined: It occurs when a variable has been declared but has not been assigned any value. Undefined is not a keyword. Undeclared: It occurs when we try to access any variable that is not initialized or declared earlier using the var or const keyword.\par
Q.6 Using console.log() print out the following statement: The quote 'There is no exercisebetter for the heart than reaching down and lifting people up.' by John Holmes teaches us tohelp one another. Using console.log() print out the following quote by Mother Teresa:\par
JavaScript is a dynamically typed (or loosely typed) programming language. It allows you to declare variables without specifying or defining the variable type.\par
\par
You can create a variable in JavaScript without defining the type of value you can store in the variable. This can affect your program and cause bugs during runtime because the type can change.\par
\par
For example, a variable can be declared and assigned a number. But as you write more code, values might get misplaced, and you might assign the same variable a string or boolean. This would affect your code when it runs:\par
\par
let myVariable = 45; // => number\par
myVariable = 'John Doe'; // => string\par
myVariable = false; // => boolean\par
As you can see from the above example, a variable in JavaScript can change types throughout the execution of a program. This can be hard to keep track of as a programmer. This is one of the reasons why TypeScript is considered a superset of JavaScript.\par
To validate variables by checking their types in JavaScript, you can use the typeof operator. Type checking in JavaScript is not straightforward for non-primitive data types and specific values. This is why type-checking can become annoying, especially for inexperienced JS developers.\par
In this article, you will learn how to use the typeof operator, instances when you should not use typeof, and the best way to check type in JavaScript for such instances.\par
JavaScript Data Types\par
In JavaScript, data types are classified into two groups: you have primitive and non-primitive data types. Aside from the object, which is a non-primitive data type, all other data types are primitive.\par
These data types include:\par
String\par
Number\par
Boolean (true and false)\par
null\par
undefined\par
Symbol\par
At this point, you may assume that I omitted arrays and functions. But no, I didn\rquote t. This is because they are both objects.\par
How to Check Type with the typeof Operator in JavaScript\par
The typeof operator accepts a single operand (a unary operator) and determines the operand's type.\par
There are two ways you can use the typeof operator. You can evaluate a single value or an expression:\par
typeof(expression);\par
// Or\par
typeof value;\par
\b Q.7 Check if typeof '10' is exactly equal to 10. If not make it exactly equal?\par
\b0 Data types and type checking are fundamental aspects of any programming language.\par
\par
Many programming languages like Java have strict type checking. This means that if a variable is defined with a specific type it can contain a value of only that type.\par
\par
JavaScript, however, is a loosely typed (or dynamically typed) language. This means that a variable can contain a value of any type. JavaScript code can execute like this:\par
\par
let one = 1;\par
one = 'one';\par
one = true;\par
one = Boolean(true);\par
one = String('It is possible');\par
With this in mind, it is critical to know the type of a variable at any given time.\par
\par
The type of a variable is determined by the type of the value assigned to it. JavaScript has a special operator called typeof which lets you get the type of any value.\par
\par
In this article, we will learn how typeof is used, along with a few gotchas to watch out for.\par
\cf0\kerning0\b\lang9 Q.8 Write a JavaScript Program to find the area of a triangle? \par
\b0 How to find the area of a triangle using JavaScript ?\par
We are using JavaScript to solve a simple geometry problem: finding the area of a triangle. In this article, we\rquote ll show you different ways to do it. Whether you\rquote re new to coding or want to understand JavaScript better, follow along as we figure out how to find the area of a triangle\par
\par
Below are the approaches:\par
\par
Table of Content\par
\par
When height is known\par
When all sides are known\par
Approach 1: When height is known\par
When the height(h) and base(b) are known then we could use the Formula to find the Area of the Triangle:\par
\par
area = (base * height) / 2\par
Example: Below is an example of the above-explained approach.\par
\par
\par
function triangleArea(base, height) \{\par
  return 0.5 * base * height;\par
\}\par
\par
// Example usage\par
let baseLength = 10;\par
let heightLength = 5;\par
let area = triangleArea(baseLength, heightLength);\par
console.log(`The area of the triangle is: $\{area\}`);\par
\par
Output\par
The area of the triangle is: 25\par
Approach 2: When all sides are known\par
When all sides(s1, s2, s3) are known then we could use:\par
\par
Formula to find the Area of the Triangle:\par
let s = (side1 + side2 + side3) / 2;\par
let area = Math.sqrt(s * ((s - side1) * (s - side2) * (s - side3)));\par
Example: This example shows the area of triangle using JavaScript.\par
\par
\par
function triangleArea(side1, side2, side3) \{\par
  // Calculate the semi-perimeter\par
\b Q.9 Write a JavaScript program to calculate days left until next Christmas? \par
\b0 In this article, we will learn how to calculate the number of days left until next Christmas using JavaScript. Christmas marks the birth of Christ, mainly celebrated by millions of people around the globe on 25 December every year as a religious and cultural festival.\par
\par
Approach: In order to calculate the number of days between two dates in JavaScript, the Date object must be used. We find out the year value of this year\rquote s Christmas Day using getFullYear() method. We then check if the current date has already passed the Christmas day by checking if the month is December and the day is more than the 25th. The getMonth() method is used to get the month and the getDate() method is used to get the date value of the given time.\par
\par
If this condition is satisfied, we add one more year to the Christmas year that we found earlier, hence advancing the Christmas Day for the next year. We then create the final date value of the next Christmas Day.\par
\par
We can use the getTime() function to obtain both the date values in milliseconds. After the conversion, we subtract the later one from the earlier one to get the difference in milliseconds. The final number of days is obtained by dividing the difference (in milliseconds) between the two dates by the number of milliseconds in one day.\par
\b Q.10 What is Condition Statement?\b0  \par
Conditional Statements in Programming | Definition, Types, Best Practices\par
Conditional statements in programming are used to control the flow of a program based on certain conditions. These statements allow the execution of different code blocks depending on whether a specified condition evaluates to true or false, providing a fundamental mechanism for decision-making in algorithms. In this article, we will learn about the basics of Conditional Statements along with their different types.\par
\b Q.11 Find circumference of Rectangle formula : C = 4 * a ? \par
\b0 The circumference of a figure is the sum of all the side lengths. To calculate the circumference of square, length of one of the side is required as all sides are equal. To calculate the circumference of rectangle, length and breadth of rectangle is required. \par
Circumference of a Square: \par
 The circumference of a square is given by the formula: \par
 +C = 4 * a\par
where a is the side length.\par
\b Q.12 WAP to convert years into days and days into years? \par
\b0 This is a Java Program to Convert a Given Number of Days in terms of Years, Weeks & Days.\par
Enter any integer number as an input. After that we first divide the input by 365 to get number of years. After that we use modulus opeartion and division by 7 to get number of weeks. Finally we use modulo operation to get the number of days.\par
Here is the source code of the Java Program to Convert a Given Number of Days in terms of Years, Weeks & Days. The Java program is successfully compiled and run on a Windows system. The program output is also shown below.\par
\b Q.13 Convert temperature Fahrenheit to Celsius? (Conditional logic Question) \par
\b0 To convert Fahrenheit to Celsius, subtract 32 from the Fahrenheit temperature and then multiply the result by 5/9. let fahrenheit = 285; let celsius = (fahrenheit - 32) * 5/9; console. log(celsius); The answer is approximately 140.56 degrees Celsius.\par
\b  \b0 Write a JavaScript exercise to get the filename extension.\par
Visual Presentation:\par
Sample Solution:\par
JavaScript Code: // Assign the string "system.php" to the variable filename filename = "system.php"; // Log the result of extracting the file extension using split and pop to the console console.log\par
\b Q.15 What is the result of the expression (5 > 3 && 2 < 4)? \par
\b0 The '&&' operator returns \par
true if both conditions are true.\par
\b Q.16 What is the result of the expression (true && 1 && "hello")? \par
\b0 What is the result of the expression (true && 1 && "hello")? Answer: The result is "hello", because all the operands are truthy, and the "&&" operator returns the last truthy operand.\par
\b  Q.17 What is the result of the expression true && false || false && true? \par
\b0 Given this information, I would expect false && true || true to evaluate to false. However, this is not the case. The expected result (false) is only given when the statement is written like:\par
\par
false && (true || true)\par
A coworker and I have tried to work this out and the closest thing we could come up with is that the statement is being evaluated by order of precedence. According to the MDN Operator Precedence logical-and has a higher precidence over logical-or, suggesting that the condition is evaluated as if false && true were a single statement, which then moves on to determine the boolean condition of false || true which is then true. Written out, this would be:\par
(false && true) || true\par
Something is wrong here. It's either the documentation, the JavaScript parsing logic, or my interpretation\par
\b Q.18 What is a Loop and Switch Case in JavaScript define that ?\b0  \par
In JavaScript, a switch statement is a control flow statement that evaluates an expression and executes code based on matching cases. It provides a more concise and readable way to handle multiple possible conditions compared to nested if...else statements.\par
\par
Syntax:\par
switch (expression) \{\par
  case value1:\par
    // code block to be executed if expression matches value1\par
    break;\par
  case value2:\par
    // code block to be executed if expression matches value2\par
    break;\par
  // more cases can be added as needed\par
  default:\par
    // code block to be executed if expression does not match any case\par
\}\par
Parameters:\par
expression: The expression whose value is compared against each case.\par
value1, value2, etc.: The possible values that expression may match.\par
case and break: Each case represents a possible value of the expression. When a case is matched, the associated code block is executed. The break statement is used to exit the switch statement and prevent fall-through to subsequent cases.\par
default: An optional default case that is executed if expression does not match any of the specified cases.\par
\b 19 What is the use of is Nan function?\b0\par
The JavaScript isNaN() Function is used to check whether a given value is an illegal number or not. It returns true if the value is a NaN else returns false. It is different from the Number.isNaN() Method.\par
Syntax:\par
isNaN( value )\par
Parameter Values: This method accepts a single parameter as mentioned above and described below: \par
\par
value: It is a required value passed in the isNaN() function.\par
Return Value: It returns a Boolean value i.e. returns true if the value is NaN else returns false.\par
\b 20 What is the difference between && and || in JavaScript? \par
\b0 If you are using || the compiler checks left and right from this operator and it enough if min ONE side return true. If you are using a && operator BOTH sides have to be true (or false). By the way this concepts is also valid If you do have a chain of || or &&\par
\b Q.21 What is the use of Void (0)? \par
\b0 JavaScript void 0 means returning undefined (void) as a primitive value. You might come across the term \ldblquote JavaScript:void(0)\rdblquote  while going through HTML documents. It is used to prevent any side effects caused while inserting an expression in a web page.\par
\b Q.22 Check Number Is Positive or Negative in JavaScript? \par
\b0 JavaScript Program to Check if a number is Positive, Negative, or Zero\par
In this article, we are going to learn if a number is positive, negative, or zero, for numerous mathematical operations and conditional statements in JavaScript. It is critical to know if a given number is positive, negative, or zero. This article provides a straightforward approach in JavaScript that lets you determine whether a given number belongs to one of these groups.\par
Several methods can be used to Check if a number is Positive, Negative, or Zero.\par
We will explore all the above methods along with their basic implementation with the help of examples.\par
\b Q.23 Find the Character Is Vowel or Not ? \par
\b0 In English, there are 5 vowel letters and 21 consonant letters. In lowercase alphabets, \lquote a\rquote , \lquote e\rquote , \lquote i\rquote , \lquote o\rquote , and \lquote u\rquote  are vowels and all other characters (\lquote b\rquote , \lquote c\rquote , \lquote d, \lquote f\rquote\'85.) are consonants. Similarly in uppercase alphabets, \lquote A\rquote , \lquote E\rquote , \lquote I\rquote ,   \lquote O\rquote , and \lquote U\rquote  are vowels, and the rest of the characters are consonants.\par
In this article, we will learn how to write a C program to check if a character is a vowel or consonant.\par
\b Q.24 Write to check whether a number is negative, positive or zero? \par
\b0 1.Logic to check positive, negative or zero\par
2.Input a number from user in some variable say num .\par
3.Check if(num < 0) , then number is negative.\par
4.Check if(num > 0) , then number is positive.\par
5.Check if(num == 0) , then number is zero.\tab\par
Q.25 Write to find number is even or odd using ternary operator in JS? \par
We are going to learn how to check whether the number is Even or Odd using JavaScript. In the number system any natural number that can be expressed in the form of (2n + 1) is called an odd number and if the number can be expressed in the form of 2n is called an even number.\par
\par
In other words, Those numbers that are completely divisible by 2 (give the remainder 0 after dividing by 2) are known as even numbers and those which divided by 2 and leave a reminder 1 are called odd numbers.\par
\par
Even = \{2k : k \f1\u8712?\f0  Z\}\par
Odd = \{2k + 1 : k \f1\u8712?\f0   Z\}\par
where k is an integer. \par
Example:\par
\par
Input: 2\par
Output: Even number\par
Input: 41\par
Output: Odd Number\par
There are several methods that can be used to Check if a Number is Odd or Even, which are listed below:\par
\b Q\f2 .\f0 26\f2  \f0 Write\f2  \f0 find\f2  \f0 maximum\f2  \f0 number\f2  \f0 among\f2  \f0 3\f2  \f0 numbers\f2  \f0 using\f2  \f0 ternary\f2  \f0 operator\f2  \f0 in\f2  \f0 JS\f2 ?\par
\b0 Program to Find the Largest Number using Ternary Operator\par
The task is to write a program to find the largest number using ternary operator among: \par
Two Numbers\par
Three Numbers\par
Four Numbers\par
Examples: \par
Input : 10, 20 \par
Output : \par
Largest number between two numbers (10, 20) is: 20\par
Input : 25 75 55 15\par
Output : \par
Largest number among four numbers (25, 75, 55, 15) is: 75\par
A Ternary Operator has the following form,\par
exp1 ? exp2 : exp3\par
The expression exp1 will be evaluated always. Execution of exp2 and exp3 depends on the outcome of exp1. If the outcome of exp1 is non zero then exp2 will be evaluated, otherwise, exp3 will be evaluated.\par
\b\f0 Q\f2 .\f0 27\f2  \f0 Write\f2  \f0 to\f2  \f0 find\f2  \f0 minimum\f2  \f0 number\f2  \f0 among\f2  \f0 3\f2  \f0 numbers\f2  \f0 using\f2  \f0 ternary\f2  \f0 operator\f2  \f0 in\f2  \f0 JS\f2 ?\par
\b0 JavaScript Program to Find the Smallest Among Three Numbers\par
Last Updated : 04 Mar, 2024\par
In JavaScript, finding the smallest among three numbers is a common task in programming. There are multiple approaches to achieving this, each with its advantages and use cases.\par
\par
There are several approaches in JavaScript to find the smallest among three numbers which are as follows:\par
\par
Table of Content\par
\par
Using Conditional Statements\par
Using Math.min() Function\par
Using sort method\par
Using Conditional Statements\par
The simplest approach is to use conditional statements (if, else if, else) to compare the numbers and find the smallest one.\par
\b\par
Q.28 Write to find the largest of three numbers in JS? \par
\b0 How to Deal with Large Numbers in JavaScript ?\par
Large numbers are the numbers that can hold huge memory and evaluation time is more than exceeds space and time to process. We can deal with large numbers in JavaScript using the data type BigInt.\par
\par
Advantages:\par
It can hold numbers of large sizes.\par
It performs arithmetic operations.\par
Disadvantages:\par
Consumes huge memory.\par
Approach\par
By default, JavaScript converts a big number by adding e+39 at the end of it.\par
\b Q.29 Write to show\par
\b0 i. Monday to Sunday using switch case in JS?\par
The JavaScript switch statement evaluates an expression and executes a block of code based on matching cases. It provides an alternative to long if-else chains, improving readability and maintainability, especially when handling multiple conditional branches.\par
Switch Statement Syntax\par
switch (expression) \{\par
    case value1:\par
        // code block 1;\par
        break;\par
    case value2:\par
         // code block 2;\par
        break;\par
   ...\par
    default:\par
       // default code block;\par
\}\par
Expression is the value that you want to compare.\par
Case value1, case value2, etc., represent the possible values of the expression.\par
break statement terminates the switch statement. Without it, execution will continue into the next case.\par
Default specifies the code to run if none of the cases match the expression.\par
How Switch Statement Works\par
Evaluation: The expression inside the switch the statement is evaluated once.\par
Comparison: The value of the expression is compared with each case label (using strict equality ===).\par
Execution: If a match is found, the corresponding code block following the matching case the label is executed. If no match is found, the execution jumps to the default case (if present) or continues with the next statement after the switch block.\par
Break Statement: After executing a code block, the break statement terminates the switch statement, preventing execution from falling through to subsequent cases. If break is omitted, execution will continue to the next case (known as \ldblquote fall-through\rdblquote ).\par
Default Case: The default case is optional. If no match is found, the code block under default is executed.\par
ii. Vowel or Consonant using switch case in JS? \par
JavaScript Program to Find if a Character is a Vowel or Consonant\par
In this article, we will see different approaches to finding whether a character is a vowel or a consonant using JavaScript. We will check the condition of a character being Vowel and display the result.\par
Approaches to find if a character is a vowel or consonant\par
Table of Content\par
\b Q.30 What are the looping structures in JavaScript? Any one Example?\par
\b0 JavaScript Loops\par
JavaScript loops are essential for efficiently handling repetitive tasks. They execute a block of code repeatedly as long as a specified condition remains true. These loops are powerful tools for automating tasks and streamlining your code.\par
\par
For example, suppose we want to print \ldblquote Hello World\rdblquote  5 times. This can be done using JS Loop easily. In Loop, the statement needs to be written only once and the loop will be executed 5 times as shown below:\par
\par
\par
for (let i = 0; i < 5; i++) \{\par
    console.log("Hello World!");\par
\}\par
Output\par
Hello World!\par
Hello World!\par
Hello World!\par
Hello World!\par
Hello World!\par
Table of Content\par
\par
for Loop\par
while Loop\par
do-while Loop\par
for-in Loop\par
for-of Loop\par
Labeled Statement\par
Break Statement\par
Continue Statement\par
Infinite Loop (Loop Error)\par
1. JavaScript for Loop\par
The JS for loop provides a concise way of writing the loop structure. The for loop contains initialization, condition, and increment/decrement in one line thereby providing a shorter, easy-to-debug structure of looping. \par
JavaScript Loops\par
Last Updated : 03 Jun, 2024\par
JavaScript loops are essential for efficiently handling repetitive tasks. They execute a block of code repeatedly as long as a specified condition remains true. These loops are powerful tools for automating tasks and streamlining your code.\par
For example, suppose we want to print \ldblquote Hello World\rdblquote  5 times. This can be done using JS Loop easily. In Loop, the statement needs to be written only once and the loop will be executed 5 times as shown below:\par
for (let i = 0; i < 5; i++) \{\par
    console.log("Hello World!");\par
\}\par
Output\par
Hello World!\par
Hello World!\par
Hello World!\par
Hello World!\par
Hello World!\par
Table of Content\par
\par
for Loop\par
while Loop\par
do-while Loop\par
for-in Loop\par
for-of Loop\par
Labeled Statement\par
Break Statement\par
Continue Statement\par
Infinite Loop (Loop Error)\par
1. JavaScript for Loop\par
The JS for loop provides a concise way of writing the loop structure. The for loop contains initialization, condition, and increment/decrement in one line thereby providing a shorter, easy-to-debug structure of looping. \par
Syntax\par
for (initialization; testing condition; increment/decrement) \{\par
    statement(s)\par
\}\par
Flowchart\par
Initialization condition: It initializes the variable and mark the start of a for loop. An already declared variable can be used or a variable can be declared, local to loop only.\par
Test Condition: It is used for testing the exit condition of a for loop. It must return a boolean value. It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.\par
Statement execution: Once the condition is evaluated to be true, the statements in the loop body are executed.\par
Increment/ Decrement: It is used for updating the variable for the next iteration.\par
Loop termination: When the condition becomes false, the loop terminates marking the end of its life cycle.\par
Example\par
\par
// JavaScript program to illustrate for loop\par
let x;\par
\par
// for loop begins when x = 2\par
// and runs till x <= 4\par
for (x = 2; x <= 4; x++) \{\par
    console.log("Value of x: " + x);\tab\tab\par
\}\par
Output\par
Value of x: 2\par
Value of x: 3\par
Value of x: 4\par
\b Q.31 Write a print 972 to 897 using for loop in JS? \par
\b0 for (let i = 972; i >= 897; i--) \{\par
    console.log(i);\par
\}\par
This code initializes a for loop with i starting at 972 and decrements i by 1 in each iteration until i is less than 897. It prints the value of i in each iteration.\par
\b Q.32 Write to print factorial of given number? \par
\b0 What is the factorial of a number?\par
Factorial of a non-negative integer is the multiplication of all positive integers smaller than or equal to n. For example factorial of 6 is 6*5*4*3*2*1 which is 720. \par
A factorial is represented by a number and a  \rdblquote  ! \rdblquote   mark at the end. It is widely used in permutations and combinations to calculate the total possible outcomes. A French mathematician Christian Kramp firstly used the exclamation.\par
\b Q.33 Write to print Fibonacci series up to given numbers? \par
\b0 Sure! Here's a Python script that prints the Fibonacci series up to a given number. The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, starting from 0 and 1.\par
\par
python\par
Copy code\par
def fibonacci_series(n):\par
    fib_sequence = []\par
    a, b = 0, 1\par
    while a <= n:\par
        fib_sequence.append(a)\par
        a, b = b, a + b\par
    return fib_sequence\par
\par
# Example usage\par
n = int(input("Enter a number: "))\par
fib_series = fibonacci_series(n)\par
print("Fibonacci series up to", n, "is:", fib_series)\par
You can run this script and enter a number when prompted. The program will then print the Fibonacci series up to that number. For example:\par
\par
less\par
Copy code\par
Enter a number: 20\par
Fibonacci series up to 20 is: [0, 1, 1, 2, 3, 5, 8, 13]\par
Q.34 Write to print number in reverse order e.g.: number = 64728 ---> reverse =82746 in JS? \par
function reverseNumber(num) \{\par
    // Convert the number to a string\par
    let numStr = num.toString();\par
    \par
    // Split the string into an array of characters, reverse the array, and join it back into a string\par
    let reversedStr = numStr.split('').reverse().join('');\par
    \par
    // Convert the reversed string back to a number\par
    let reversedNum = parseInt(reversedStr, 10);\par
   return reversedNum;\par
\}\par
// Example usage\par
let number = 64728;\par
let reversedNumber = reverseNumber(number);\par
console.log("Reversed number:", reversedNumber);  // Output: Reversed number: 82746\par
This function works by converting the number to a string, reversing the string, and then converting the reversed string back to a number. The split('') method splits the string into an array of characters, reverse() reverses the array, and join('') joins the array back into a string. Finally, parseInt() converts the string back to a number.\par
\b Q.35 Write a program make a summation of given number (E.g., 1523 Ans: - 11) in JS? \b0\par
function sumOfDigits(num) \{\par
    let sum = 0;\par
    let numStr = num.toString();\par
    for (let i = 0; i < numStr.length; i++) \{\par
        sum += parseInt(numStr[i], 10);\par
    \}\par
    return sum;\par
\}\par
\par
// Example usage\par
let number = 1523;\par
let result = sumOfDigits(number);\par
console.log("Sum of digits:", result);  // Output: Sum of digits: 11\par
This function works by converting the number to a string, iterating over each character in the string, converting each character back to an integer, and summing them up.\par
Q.36 Write a program you have to make a summation of first and last Digit. (E.g., 1234 Ans: -\par
function sumFirstAndLastDigit(num) \{\par
    let numStr = num.toString();\par
     // Get the first digit\par
    let firstDigit = parseInt(numStr[0], 10);\par
    \par
   // Get the last digit\par
    let lastDigit = parseInt(numStr[numStr.length - 1], 10);\par
    \par
    // Calculate the sum\par
    let sum = firstDigit + lastDigit;\par
    \par
    return sum;\par
\}\par
\par
// Example usage\par
let number = 1234;\par
let result = sumFirstAndLastDigit(number);\par
console.log("Sum of first and last digit:", result);  // Output: Sum of first and last digit: 5\par
This function works by converting the number to a string, extracting the first and last characters, converting them back to integers, and summing them up.\par
\b Q.36 Use console.log() and escape characters to print the following pattern in JS?\b0\par
1 1 1 1 1\par
2 1 2 4 8\par
3 1 3 9 27\par
4 1 4 16 64\par
5 1 5 25 125\par
console.log("1 1 1 1 1");\par
console.log("2 1 2 4 8");\par
console.log("3 1 3 9 27");\par
console.log("4 1 4 16 64");\par
console.log("5 1 5 25 125");\par
Alternatively, if you want to generate the pattern programmatically:\par
javascript\par
Copy code\par
for (let i = 1; i <= 5; i++) \{\par
    let line = `$\{i\} 1 $\{i\} $\{i*i\} $\{i*i*i\}`;\par
    console.log(line);\par
\}\par
Both approaches will output the desired pattern. The first one uses hardcoded strings, while the second one generates the pattern dynamically using a loop.\par
\b Q.38 Use pattern in console.log in JS?\b0\par
1) 1\par
1 0\par
1 0 1\par
1 0 1 0\par
1 0 1 0 1 \par
 onsole.log("1");\par
console.log("1 0");\par
console.log("1 0 1");\par
console.log("1 0 1 0");\par
console.log("1 0 1 0 1");\par
If you want to generate this pattern programmatically:\par
1\par
2 3\par
4 5 6\par
7 8 9 10\par
11 12 13 14 15\par
\par
for (let i = 1; i <= 5; i++) \{\par
    let line = "";\par
    for (let j = 1; j <= i; j++) \{\par
        line += (j % 2 === 0 ? "0 " : "1 ");\par
    \}\par
    console.log(line.trim());\par
\}\par
This code will output the pattern as specified, either by hardcoding each line or by generating it using a loop\par
let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\par
let index = 0;\par
*\par
* *\par
* * *\par
* * * *\par
* * * * *\par
for (let i = 1; i <= 5; i++) \{\par
    let line = "";\par
    for (let j = 1; j <= i; j++) \{\par
        line += "* ";\par
    \}\par
    console.log(line);\par
\}\par
Both approaches will output the desired pattern. The first one prints each line manually, while the second one generates the pattern dynamically using nested loops.\par
\b Q.39 Accept 3 numbers from user using while loop and check each numbers palindrome? \par
\b0 Certainly! Here is a JavaScript code snippet that accepts three numbers from the user using a while loop and checks if each number is a palindrome:\par
const readline = require('readline').createInterface(\{\par
    input: process.stdin,\par
    output: process.stdout\par
\});\par
\par
function isPalindrome(num) \{\par
    let str = num.toString();\par
    let reversedStr = str.split('').reverse().join('');\par
    return str === reversedStr;\par
\}\par
\par
let count = 0;\par
let numbers = [];\par
\par
function askForNumber() \{\par
    readline.question(`Enter number $\{count + 1\}: `, input => \{\par
        let number = parseInt(input, 10);\par
        if (!isNaN(number)) \{\par
            numbers.push(number);\par
            count++;\par
            if (count < 3) \{\par
                askForNumber();\par
            \} else \{\par
                readline.close();\par
                checkPalindromes();\par
            \}\par
        \} else \{\par
            console.log("Invalid input. Please enter a valid number.");\par
            askForNumber();\par
        \}\par
    \});\par
\}\par
function checkPalindromes() \{\par
    numbers.forEach((num, index) => \{\par
        if (isPalindrome(num)) \{\par
            console.log(`Number $\{index + 1\} ($\{num\}) is a palindrome.`);\par
        \} else \{\par
            console.log(`Number $\{index + 1\} ($\{num\}) is not a palindrome.`);\par
        \}\par
    \});\par
\}\par
\par
askForNumber();\par
This script uses the readline module to read input from the user. It defines a function isPalindrome to check if a number is a palindrome. It then uses a while loop-like structure to continuously prompt the user for input until three valid numbers are entered. Finally, it checks if each of these numbers is a palindrome and prints the result.\par
\b Q.39 Accept 3 numbers from user using while loop and check each numbers palindrome? \par
\b0 def is_palindrome(number):\par
    return str(number) == str(number)[::-1]\par
\par
count = 0\par
numbers = []\par
\par
# Accept 3 numbers from the user\par
while count < 3:\par
    try:\par
        num = int(input(f"Enter number \{count + 1\}: "))\par
        numbers.append(num)\par
        count += 1\par
    except ValueError:\par
        print("Please enter a valid integer.")\par
\par
# Check each number for palindrome\par
for i, num in enumerate(numbers):\par
    if is_palindrome(num):\par
        print(f"Number \{i + 1\} (\{num\}) is a palindrome.")\par
    else:\par
        print(f"Number \{i + 1\} (\{num\}) is not a palindrome.")\par
Explanation:\par
is_palindrome Function: This function takes a number as input, converts it to a string, and checks if the string is equal to its reverse.\par
While Loop: This loop runs until we have accepted three valid integers from the user. It uses a try-except block to ensure that the input is an integer.\par
Checking Palindrome: After collecting the three numbers, another loop checks each number to see if it is a palindrome and prints the result.\par
You can run this code in a Python environment, and it will prompt you to enter three numbers, then check each one to see if it is a palindrome.\par
\b Q.40 Write a JavaScript Program to display the current day and time in the following format.\par
\b0 Sample Output: Today is Friday. Current Time is 12 PM: 12 : 22 2 ?\par
function formatTime(date) \{\par
  let hours = date.getHours();\par
  let minutes = date.getMinutes();\par
  let seconds = date.getSeconds();\par
  let milliseconds = date.getMilliseconds();\par
  let period = hours >= 12 ? 'PM' : 'AM';\par
\par
  hours = hours % 12;\par
  hours = hours ? hours : 12; // the hour '0' should be '12'\par
  minutes = minutes < 10 ? '0' + minutes : minutes;\par
  seconds = seconds < 10 ? '0' + seconds : seconds;\par
\par
  return `$\{hours\} $\{period\} : $\{minutes\} : $\{seconds\} $\{milliseconds\}`;\par
\}\par
function getCurrentDayAndTime() \{\par
  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\par
  const date = new Date();\par
    const day = days[date.getDay()];\par
  const time = formatTime(date);\par
 console.log(`Today is $\{day\}.`);\par
  console.log(`Current Time is $\{time\}`);\par
\}\par
\par
getCurrentDayAndTime();\par
Explanation:\par
formatTime Function: This function formats the current time. It converts the hour from 24-hour format to 12-hour format and appends the appropriate period (AM/PM). It also ensures minutes and seconds are displayed with two digits and appends milliseconds.\par
getCurrentDayAndTime Function: This function gets the current day and time, formats them, and displays them in the required format.\par
days Array: This array holds the names of the days of the week, which are used to get the current day name.\par
new Date(): This creates a new Date object with the current date and time.\par
Output: The function logs the current day and formatted time to the console.\par
You can run this code in any JavaScript environment, such as a browser's developer console or a Node.js environment, to see the output.\par
\b Q.41 Write a JavaScript program to get the current date? \par
\b0 function getCurrentDate() \{\par
  const date = new Date();\par
const day = date.getDate();\par
  const month = date.getMonth() + 1; // Months are zero-based, so add 1\par
  const year = date.getFullYear();\par
\par
  // Format the day and month to be two digits (e.g., 01, 02, ..., 12)\par
  const formattedDay = day < 10 ? '0' + day : day;\par
  const formattedMonth = month < 10 ? '0' + month : month;\par
  return `$\{formattedMonth\}/$\{formattedDay\}/$\{year\}`;\par
\}\par
console.log(`Current Date is: $\{getCurrentDate()\}`);\par
Explanation:\par
new Date(): This creates a new Date object representing the current date and time.\par
getDate(): This method returns the day of the month (1-31).\par
getMonth(): This method returns the month (0-11). Since months are zero-based, we add 1 to get the correct month number.\par
getFullYear(): This method returns the full year (e.g., 2024).\par
Formatting: The day and month are formatted to ensure they are two digits, which involves adding a leading zero if they are less than 10.\par
String Template Literals: The formatted date is created using template literals to \tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab ensure the format is MM/DD/YYYY.\par
You can run this code in any JavaScript environment, such as a browser's developer console or a Node.js environment, to see the output.\par
\b Q.42 Write a JavaScript program to compare two objects?\b0  \par
To compare two objects in JavaScript, you need to check whether they have the same properties with the same values. Here's a simple and comprehensive way to do this:\par
Check if both inputs are objects.\par
Check if they have the same number of properties.\par
Check if each property in one object exists and has the same value in the other object.\par
Handle nested objects recursively.\par
Here\rquote s a JavaScript function to compare two objects:\par
\par
javascript\par
Copy code\par
function isObject(obj) \{\par
  return obj !== null && typeof obj === 'object';\par
\}\par
function deepEqual(obj1, obj2) \{\par
  if (obj1 === obj2) \{\par
    return true;\par
  \}\par
\par
  if (!isObject(obj1) || !isObject(obj2)) \{\par
    return false;\par
  \}\par
\par
  const keys1 = Object.keys(obj1);\par
  const keys2 = Object.keys(obj2);\par
\par
  if (keys1.length !== keys2.length) \{\par
    return false;\par
  \}\par
\par
  for (let key of keys1) \{\par
    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) \{\par
      return false;\par
    \}\par
  \}\par
\par
  return true;\par
\}\par
\par
// Example usage\par
const obj1 = \{\par
  name: 'John',\par
  age: 30,\par
  address: \{\par
    city: 'New York',\par
    zip: '10001'\par
  \}\par
\};\par
\par
const obj2 = \{\par
  name: 'John',\par
  age: 30,\par
  address: \{\par
    city: 'New York',\par
    zip: '10001'\par
  \}\par
\};\par
\par
const obj3 = \{\par
  name: 'John',\par
  age: 30,\par
  address: \{\par
    city: 'Los Angeles',\par
    zip: '90001'\par
  \}\par
\};\par
\par
console.log(deepEqual(obj1, obj2)); // true\par
console.log(deepEqual(obj1, obj3)); // false\par
Explanation:\par
isObject Function:\par
\par
Checks if a given value is an object (and not null).\par
deepEqual Function:\par
\par
Checks for strict equality (===). If they are strictly equal, returns true.\par
Ensures both values are objects.\par
Compares the number of properties using Object.keys.\par
Iterates through the properties of obj1 and checks if obj2 contains the same properties with equal values. If any property is not equal, it returns false .\par
Recursively calls deepEqual for nested objects.\par
This function will correctly handle nested objects and ensure a deep comparison between the two object.\par
\b Q.43 Write a JavaScript program to convert an array of objects into CSV string? \par
\b0 To convert an array of objects into a CSV string in JavaScript, you need to:\par
Extract the headers (object keys).\par
Construct the CSV string by joining the headers and the values of each object.\par
Here's a step-by-step function to achieve this:\par
\par
javascript\par
Copy code\par
function arrayToCSV(array) \{\par
  if (array.length === 0) \{\par
    return '';\par
  \}\par
\par
  const headers = Object.keys(array[0]);\par
  const csvRows = [];\par
  // Add the headers row\par
  csvRows.push(headers.join(','));\par
  // Add the rows\par
  for (const obj of array) \{\par
    const values = headers.map(header => \{\par
      const escapedValue = ('' + obj[header]).replace(/"/g, '""'); // Escape double quotes\par
      return `"$\{escapedValue\}"`; // Enclose each value in double quotes\par
    \});\par
    csvRows.push(values.join(','));\par
  \}\par
return csvRows.join('\\n');\par
\}\par
// Example usage\par
const data = [\par
  \{ name: 'John', age: 30, city: 'New York' \},\par
  \{ name: 'Jane', age: 25, city: 'Los Angeles' \},\par
  \{ name: 'Mike', age: 35, city: 'Chicago' \}\par
];\par
onst csvString = arrayToCSV(data);\par
console.log(csvString);\par
Explanation:\par
Check for Empty Array:\par
If the array is empty, return an empty string.\par
Extract Headers:\par
Get the keys of the first object in the array to use as headers.\par
Initialize CSV Rows Array:\par
Start with the headers row by joining the headers with commas.\par
Add Data Rows:\par
Iterate over each object in the array.\par
For each object, create a row by mapping the headers to the corresponding values in the object.\par
Escape any double quotes in the values by replacing them with two double quotes ("").\par
Enclose each value in double quotes.\par
Join the values with commas to form a CSV row.\par
Join Rows with Newline Characters:\par
Join all rows with newline characters to form the final CSV string.\par
The arrayToCSV function handles escaping of double quotes in the values and ensures that the CSV format is correctly adhered to, making it suitable for exporting data from JavaScript to CSV.\par
\b Q.44 Write a JavaScript program to capitalize first letter of a string? \par
\b0 This function works for basic strings. If you want to handle more complex scenarios, such as strings with leading whitespace or non-alphabetic characters, you might need to adjust the function accordingly. Here\rquote s an enhanced version to handle leading whitespace:\par
function capitalizeFirstLetter(str) \{\par
  str = str.trim(); // Remove leading and trailing whitespace\par
  if (str.length === 0) \{\par
    return str;\par
  \}\par
  return str.charAt(0).toUpperCase() + str.slice(1);\par
\}\par
const exampleString = "   hello world";\par
const capitalizedString = capitalizeFirstLetter(exampleString);\par
console.log(capitalizedString); // Output: "Hello world"\par
In this enhanced version, trim() is used to remove any leading or trailing whitespace before capitalizing the first letter.\par
\b Q. 45 Write a JavaScript program to determine if a variable is array?\par
f\b0 unction isArray(variable) \{\par
  return Array.isArray(variable);\par
\}\par
// Example usage\par
console.log(isArray([1, 2, 3])); // true\par
console.log(isArray('hello'));   // false\par
console.log(isArray(\{a: 1\}));    // false\par
console.log(isArray(null));      // false\par
console.log(isArray(undefined)); // false\par
console.log(isArray(123));       // false\par
Explanation:\par
Array.isArray() Method:\par
This method checks if the provided argument is an array.\par
It returns true if the argument is an array, and false otherwise\par
Q.46 Write a JavaScript program to clone an array? \par
Using the slice method:\par
let originalArray = [1, 2, 3, 4, 5];\par
let clonedArray = originalArray.slice();\par
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]\par
Using the concat method:\par
let originalArray = [1, 2, 3, 4, 5];\par
let clonedArray = [].concat(originalArray);\par
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]\par
Using the spread operator (ES6):\par
let originalArray = [1, 2, 3, 4, 5];\par
let clonedArray = [...originalArray];\par
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]\par
Using Array.from (ES6):\par
let originalArray = [1, 2, 3, 4, 5];\par
let clonedArray = Array.from(originalArray);\par
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]\par
Using JSON.parse and JSON.stringify (useful for deep cloning arrays with objects):\par
   let originalArray = [1, 2, 3, 4, 5];\par
let clonedArray = JSON.parse(JSON.stringify(originalArray));\par
console.log(clonedArray); // Output: [1, 2, 3, 4, 5]\par
Here's a complete example demonstrating all these methods:\par
let originalArray = [1, 2, 3, 4, 5];\par
\par
// Using slice\par
let clonedArray1 = originalArray.slice();\par
console.log('Cloned using slice:', clonedArray1);\par
\par
// Using concat\par
let clonedArray2 = [].concat(originalArray);\par
console.log('Cloned using concat:', clonedArray2);\par
\par
// Using spread operator\par
let clonedArray3 = [...originalArray];\par
console.log('Cloned using spread operator:', clonedArray3);\par
\par
// Using Array.from\par
let clonedArray4 = Array.from(originalArray);\par
console.log('Cloned using Array.from:', clonedArray4);\par
\par
// Using JSON.parse and JSON.stringify\par
let clonedArray5 = JSON.parse(JSON.stringify(originalArray));\par
console.log('Cloned using JSON.parse and JSON.stringify:', clonedArray5);\par
All these methods will effectively clone the original array, creating a new array with the same elements. Choose the one that best fits your specific needs and code style preferences.\par
\b Q.47 What is the drawback of declaring methods directly in JavaScript objects? \b0\par
Increased Memory Usage:\par
When methods are declared directly in objects, each instance of the object will have its own copy of the method. This can lead to increased memory usage, especially if many instances of the object are created. For example:\par
\par
function createPerson(name) \{\par
    return \{\par
        name: name,\par
        greet: function() \{\par
            console.log('Hello, ' + this.name);\par
        \}\par
    \};\par
\}\par
\par
let person1 = createPerson('Alice');\par
let person2 = createPerson('Bob');\par
In this example, person1 and person2 each have their own copy of the greet method, which is not efficient.\par
\par
Performance Issues:\par
Due to the increased memory usage from multiple copies of methods, the garbage collector has to work harder to manage memory, which can lead to performance issues, especially in applications that create many instances of objects.\par
\par
Lack of Inheritance:\par
Declaring methods directly in objects doesn't leverage JavaScript's prototype-based inheritance. Using prototypes allows methods to be shared across all instances, reducing memory usage and improving performance.\par
\par
Difficulties in Testing and Debugging:\par
When methods are declared directly within objects, it can make the code harder to test and debug. Each instance's method might need to be checked individually, and it becomes harder to mock or stub methods for unit tests.\par
\par
Code Duplication:\par
Directly declared methods can lead to code duplication if similar objects need to share the same behavior. This makes the code harder to maintain because changes to the method need to be replicated across all objects.\par
\par
To mitigate these drawbacks, it's often better to define methods on the prototype of a constructor function or use ES6 classes, which provide a more memory-efficient way to share methods among instances.\par
\par
Using Prototype:\par
\par
function Person(name) \{\par
    this.name = name;\par
\}\par
\par
Person.prototype.greet = function() \{\par
    console.log('Hello, ' + this.name);\par
\};\par
\par
let person1 = new Person('Alice');\par
let person2 = new Person('Bob');\par
Using ES6 Classes:\par
\par
class Person \{\par
    constructor(name) \{\par
        this.name = name;\par
    \}\par
\par
    greet() \{\par
        console.log('Hello, ' + this.name);\par
    \}\par
\}\par
\par
let person1 = new Person('Alice');\par
let person2 = new Person('Bob');\par
Both of these approaches ensure that the greet method is shared across all instances of Person, leading to better memory management and performance.\par
\b Q.48 Print the length of the string on the browser console using console.log()? \b0\par
Define a string.\par
Use the length property to get the length of the string.\par
Use console.log() to print the length to the console.\par
Here\rquote s an example:\par
html\par
<!DOCTYPE html>\par
<html>\par
<head>\par
    <title>Print String Length</title>\par
</head>\par
<body>\par
\par
<script>\par
    // Define a string\par
    var myString = "Hello, world!";\par
\par
    // Get the length of the string\par
    var stringLength = myString.length;\par
\par
    // Print the length to the browser console\par
    console.log("The length of the string is: " + stringLength);\par
</script>\par
</body>\par
</html>\par
When you open this HTML file in a web browser and check the browser console (usually accessed by pressing F12 or Ctrl+Shift+I and then navigating to the "Console" tab), you will see the output:\par
The length of the string is: 13\par
This code snippet defines a string myString with the value "Hello, world!", calculates its length using the length property, and prints the length to the console using console.log().\par
\b Q.49 Change all the string characters to capital letters using toUpperCase() method? \par
\b0 <!DOCTYPE html>\par
<html>\par
<head>\par
    <title>Convert String to Uppercase</title>\par
</head>\par
<body>\par
<script>\par
    // Define a string\par
    var myString = "Hello, world!";\par
    // Convert the string to uppercase\par
    var upperCaseString = myString.toUpperCase();\par
    // Print the uppercase string to the browser console\par
    console.log("The string in uppercase is: " + upperCaseString);\par
</script>\par
</body>\par
</html>\par
When you open this HTML file in a web browser and check the browser console (usually accessed by pressing F12 or Ctrl+Shift+I and then navigating to the "Console" tab), you will see the output:\par
The string in uppercase is: HELLO, WORLD!\par
This code snippet defines a string myString with the value "Hello, world!", converts it to uppercase using the toUpperCase() method, and then prints the uppercase string to the console using console.log()\par
\b Q.50 What is the drawback of declaring methods directly in JavaScript objects? \par
\b0 Increased Memory Usage:\par
When methods are declared directly in objects, each instance of the object will have its own copy of the method. This can lead to increased memory consumption, especially when many instances are created.\par
function createPerson(name) \{\par
    return \{\par
        name: name,\par
        greet: function() \{\par
            console.log('Hello, ' + this.name);\par
        \}\par
    \};\par
\}\par
let person1 = createPerson('Alice');\par
let person2 = createPerson('Bob');\par
In this example, person1 and person2 each have their own separate copy of the greet method.\par
Performance Issues:\par
The increased memory usage can lead to performance problems, as the garbage collector has to manage more memory. This can slow down the application, especially if many instances are frequently created and destroyed.\par
Lack of Inheritance and Reusability:\par
Declaring methods directly in objects does not leverage JavaScript's prototype-based inheritance. This means methods cannot be easily shared between instances, leading to code duplication and a lack of reusability.\par
Maintenance Difficulties:\par
If the same method logic needs to be updated, changes must be made in every object where the method is declared. This can lead to errors and inconsistencies, making the code harder to maintain.\par
Code Duplication:\par
Directly declaring methods in objects can result in duplicated code if similar behavior is needed across different objects. This makes the codebase larger and harder to manage.\par
Example: Using Prototype\par
To avoid these issues, it's better to define methods on the prototype of a constructor function or use ES6 classes. These approaches allow methods to be shared among instances, reducing memory usage and improving performance.\par
Using Prototype:\par
function Person(name) \{\par
    this.name = name;\par
\}\par
Person.prototype.greet = function() \{\par
    console.log('Hello, ' + this.name);\par
\};\par
let person1 = new Person('Alice');\par
let person2 = new Person('Bob');\par
Using ES6 Classes:\par
class Person \{\par
    constructor(name) \{\par
        this.name = name;\par
    \}\par
\par
    greet() \{\par
        console.log('Hello, ' + this.name);\par
    \}\par
\}\par
let person1 = new Person('Alice');\par
let person2 = new Person('Bob');\par
Benefits of Using Prototype or ES6 Classes\par
Shared Methods:\par
Both approaches ensure that the greet method is shared among all instances of Person, leading to better memory management.\par
Improved Performance:\par
By sharing methods, the application uses less memory and the garbage collector has less work to do, improving overall performance.\par
ode Reusability and Maintainability:\par
Methods defined on the prototype or within a class can be easily reused and maintained. Any changes to the method need to be made only once, simplifying code maintenance.\par
Leverage Inheritance:\par
Using prototypes or classes allows you to take advantage of JavaScript's inheritance features, making it easier to extend functionality and create more complex object hierarchies.\par
\b 51 Write a JavaScript program to get the current date. Expected Output : mm-dd-yyyy,\par
\b0 mm/dd/yyyy or dd-mm-yyyy, dd/mm/yyyy? \par
// Function to pad single digit numbers with a leading zero\par
function padZero(number) \{\par
  return number < 10 ? '0' + number : number;\par
\}\par
\par
// Get the current date\par
const currentDate = new Date();\par
\par
const day = padZero(currentDate.getDate());\par
const month = padZero(currentDate.getMonth() + 1); // Months are zero-based\par
const year = currentDate.getFullYear();\par
\par
// Format the date in different formats\par
const format1 = `$\{month\}-$\{day\}-$\{year\}`;\par
const format2 = `$\{month\}/$\{day\}/$\{year\}`;\par
const format3 = `$\{day\}-$\{month\}-$\{year\}`;\par
const format4 = `$\{day\}/$\{month\}/$\{year\}`;\par
\par
// Output the results\par
console.log(format1); // mm-dd-yyyy\par
console.log(format2); // mm/dd/yyyy\par
console.log(format3); // dd-mm-yyyy\par
console.log(format4); // dd/mm/yyyy\par
When you run this program, it will display the current date in all four specified formats:\par
mm-dd-yyyy\par
mm/dd/yyyy\par
dd-mm-yyyy\par
dd/mm/yyyy\par
\b Q.52 Use indexOf to determine the position of the first occurrence of a in 30 Days Of \lang1033 JavaScript?\par
\b0 // Define the string\par
const str = "30 Days Of JavaScript";\par
\par
// Use indexOf to find the position of the first occurrence of 'a'\par
const position = str.indexOf('a');\par
\par
// Output the result\par
console.log(`The position of the first occurrence of 'a' is: $\{position\}`);\par
When you run this code, it will display the position of the first occurrence of the letter 'a' in the given string.\par
\b Q,53 Use lastIndexOf to determine the position of the last occurrence of a in 30 Days Of\par
\b0 JavaScript?\par
// Define the string\par
const str = "30 Days Of JavaScript";\par
// Use lastIndexOf to find the position of the last occurrence of 'a'\par
const position = str.lastIndexOf('a');\par
// Output the result\par
console.log(`The position of the last occurrence of 'a' is: $\{position\}`);\par
When you run this code, it will display the position of the last occurrence of the letter 'a' in the given string.\par
\b Q.54 Form Validtion in JS?\par
\b0 Form validation is an essential aspect of web development to ensure that the user inputs the correct and expected data before submitting a form. JavaScript can be used to perform client-side form validation. Below is an example of how to implement form validation in JavaScript:\par
Example: Simple Form Validation\par
HTML Form:\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
    <meta charset="UTF-8">\par
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
    <title>Form Validation Example</title>\par
</head>\par
<body>\par
    <form id="myForm" onsubmit="return validateForm()">\par
        <label for="name">Name:</label>\par
        <input type="text" id="name" name="name"><br><br>\par
\par
        <label for="email">Email:</label>\par
        <input type="text" id="email" name="email"><br><br>\par
\par
        <label for="age">Age:</label>\par
        <input type="text" id="age" name="age"><br><br>\par
\par
        <input type="submit" value="Submit">\par
    </form>\par
\par
    <script src="form-validation.js"></script>\par
</body>\par
</html>\par
JavaScript Validation Logic (form-validation.js):\par
function validateForm() \{\par
    // Get form elements\par
    const name = document.getElementById('name').value;\par
    const email = document.getElementById('email').value;\par
    const age = document.getElementById('age').value;\par
\par
    // Validate name (non-empty and at least 3 characters)\par
    if (name === '' || name.length < 3) \{\par
        alert('Please enter a valid name with at least 3 characters.');\par
        return false;\par
    \}\par
\par
    // Validate email (simple regex for format)\par
    const emailPattern = /^[^ ]+@[^ ]+\\.[a-z]\{2,3\}$/;\par
    if (!emailPattern.test(email)) \{\par
        alert('Please enter a valid email address.');\par
        return false;\par
    \}\par
\par
    // Validate age (non-empty and numeric)\par
    if (age === '' || isNaN(age)) \{\par
        alert('Please enter a valid age.');\par
        return false;\par
    \}\par
\par
    // If all validations pass, allow form submission\par
    return true;\par
\}\par
Explanation:\par
HTML Form:\par
\par
A simple form with three input fields (name, email, and age) and a submit button.\par
The onsubmit attribute in the form tag is used to call the validateForm function when the form is submitted.\par
JavaScript Validation Logic:\par
\par
The validateForm function is defined to perform the validation checks.\par
The function retrieves the values of the form elements using document.getElementById().value.\par
It performs the following validations:\par
Name: Checks if the name is non-empty and has at least 3 characters.\par
Email: Uses a simple regular expression to check the format of the email address.\par
Age: Checks if the age is non-empty and a numeric value.\par
If any validation fails, an alert is shown to the user, and the form submission is prevented by returning false.\par
If all validations pass, the form is allowed to be submitted by returning true.\par
This example provides basic form validation. Depending on your requirements, you might need more sophisticated validation logic and additional checks.\par
\b Q.55 Form in Email, number, Password, Validation?\b0  \par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
    <meta charset="UTF-8">\par
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
    <title>Form Validation Example</title>\par
    <style>\par
        .error \{\par
            color: red;\par
        \}\par
    </style>\par
</head>\par
<body>\par
    <form id="myForm" onsubmit="return validateForm()">\par
        <label for="email">Email:</label>\par
        <input type="text" id="email" name="email"><br><br>\par
\par
        <label for="number">Number:</label>\par
        <input type="text" id="number" name="number"><br><br>\par
\par
        <label for="password">Password:</label>\par
        <input type="password" id="password" name="password"><br><br>\par
\par
        <label for="confirmPassword">Confirm Password:</label>\par
        <input type="password" id="confirmPassword" name="confirmPassword"><br><br>\par
\par
        <input type="submit" value="Submit">\par
    </form>\par
\par
    <script src="form-validation.js"></script>\par
</body>\par
</html>\par
JavaScript Validation Logic (form-validation.js)\par
function validateForm() \{\par
    // Get form elements\par
    const email = document.getElementById('email').value;\par
    const number = document.getElementById('number').value;\par
    const password = document.getElementById('password').value;\par
    const confirmPassword = document.getElementById('confirmPassword').value;\par
\par
    // Validate email (simple regex for format)\par
    const emailPattern = /^[^ ]+@[^ ]+\\.[a-z]\{2,3\}$/;\par
    if (!emailPattern.test(email)) \{\par
        alert('Please enter a valid email address.');\par
        return false;\par
    \}\par
\par
    // Validate number (non-empty and numeric)\par
    if (number === '' || isNaN(number)) \{\par
        alert('Please enter a valid number.');\par
        return false;\par
    \}\par
\par
    // Validate password (at least 8 characters, at least one letter and one number)\par
    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]\{8,\}$/;\par
    if (!passwordPattern.test(password)) \{\par
        alert('Password must be at least 8 characters long and contain at least one letter and one number.');\par
        return false;\par
    \}\par
\par
    // Validate confirm password (matches password)\par
    if (password !== confirmPassword) \{\par
        alert('Passwords do not match.');\par
        return false;\par
    \}\par
\par
    // If all validations pass, allow form submission\par
    return true;\par
\}\par
Explanation:\par
HTML Form:\par
\par
The form includes fields for email, number, password, and confirm password.\par
The onsubmit attribute in the form tag is used to call the validateForm function when the form is submitted.\par
JavaScript Validation Logic:\par
\par
The validateForm function retrieves the values of the form elements.\par
It performs the following validations:\par
Email: Uses a regular expression to check the format of the email address.\par
Number: Checks if the number field is non-empty and contains only numeric values.\par
Password: Uses a regular expression to ensure the password is at least 8 characters long and contains at least one letter and one number.\par
Confirm Password: Checks if the confirm password field matches the password field.\par
If any validation fails, an alert is shown to the user, and the form submission is prevented by returning false.\par
If all validations pass, the form is allowed to be submitted by returning true.\par
This approach provides a comprehensive validation for email, number, and password fields, ensuring that users provide valid and secure input before submitting the form.\par
\b Q.56 Dynamic Form Validation in JS? \par
\b0 Dynamic form validation in JavaScript involves checking the data entered by the user in real-time, providing immediate feedback to ensure that the input meets the specified criteria. This can be accomplished using event listeners to monitor user input and applying validation logic to provide feedback.\par
Here's a step-by-step example of how to implement dynamic form validation in JavaScript:\par
HTML Structure\par
html\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
  <meta charset="UTF-8">\par
  <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
  <title>Dynamic Form Validation</title>\par
  <style>\par
    .error \{\par
      color: red;\par
    \}\par
    .valid \{\par
      color: green;\par
    \}\par
  </style>\par
</head>\par
<body>\par
\par
  <form id="registrationForm">\par
    <label for="username">Username:</label>\par
    <input type="text" id="username" name="username" required>\par
    <span id="usernameError" class="error"></span>\par
    <br>\par
\par
    <label for="email">Email:</label>\par
    <input type="email" id="email" name="email" required>\par
    <span id="emailError" class="error"></span>\par
    <br>\par
\par
    <label for="password">Password:</label>\par
    <input type="password" id="password" name="password" required>\par
    <span id="passwordError" class="error"></span>\par
    <br>\par
\par
    <button type="submit">Register</button>\par
  </form>\par
\par
  <script src="validation.js"></script>\par
\par
</body>\par
</html>\par
JavaScript Code (validation.js)\par
document.addEventListener('DOMContentLoaded', function () \{\par
  const form = document.getElementById('registrationForm');\par
  const username = document.getElementById('username');\par
  const email = document.getElementById('email');\par
  const password = document.getElementById('password');\par
\par
  const usernameError = document.getElementById('usernameError');\par
  const emailError = document.getElementById('emailError');\par
  const passwordError = document.getElementById('passwordError');\par
\par
  // Validation functions\par
  function validateUsername() \{\par
    if (username.value.length < 3) \{\par
      usernameError.textContent = 'Username must be at least 3 characters long';\par
      username.classList.remove('valid');\par
      username.classList.add('error');\par
    \} else \{\par
      usernameError.textContent = '';\par
      username.classList.remove('error');\par
      username.classList.add('valid');\par
    \}\par
  \}\par
\par
  function validateEmail() \{\par
    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]\{2,6\}$/;\par
    if (!emailPattern.test(email.value)) \{\par
      emailError.textContent = 'Please enter a valid email address';\par
      email.classList.remove('valid');\par
      email.classList.add('error');\par
    \} else \{\par
      emailError.textContent = '';\par
      email.classList.remove('error');\par
      email.classList.add('valid');\par
    \}\par
  \}\par
\par
  function validatePassword() \{\par
    if (password.value.length < 6) \{\par
      passwordError.textContent = 'Password must be at least 6 characters long';\par
      password.classList.remove('valid');\par
      password.classList.add('error');\par
    \} else \{\par
      passwordError.textContent = '';\par
      password.classList.remove('error');\par
      password.classList.add('valid');\par
    \}\par
  \}\par
\par
  // Event listeners\par
  username.addEventListener('input', validateUsername);\par
  email.addEventListener('input', validateEmail);\par
  password.addEventListener('input', validatePassword);\par
\par
  form.addEventListener('submit', function (event) \{\par
    event.preventDefault();\par
    validateUsername();\par
    validateEmail();\par
    validatePassword();\par
\par
    if (username.classList.contains('valid') && email.classList.contains('valid') && password.classList.contains('valid')) \{\par
      alert('Form submitted successfully!');\par
      // You can proceed with form submission (e.g., send data to server)\par
      // form.submit();\par
    \} else \{\par
      alert('Please fix the errors in the form');\par
    \}\par
  \});\par
\});\par
Explanation\par
HTML Structure: The HTML form includes fields for username, email, and password, with corresponding error message spans for each field.\par
\par
JavaScript:\par
\par
DOMContentLoaded Event: Ensures the script runs after the DOM is fully loaded.\par
Validation Functions: Functions to validate each field based on specific criteria.\par
validateUsername: Ensures the username is at least 3 characters long.\par
validateEmail: Uses a regex pattern to validate the email format.\par
validatePassword: Ensures the password is at least 6 characters long.\par
Event Listeners:\par
input Event: Attached to each form field to validate the input dynamically as the user types.\par
submit Event: Prevents form submission if any of the fields are invalid, providing feedback to the user.\par
Styling\par
The .error class styles error messages and input fields with errors.\par
The .valid class can be used to style valid input fields, providing positive feedback to the user.\par
This example provides a foundation for dynamic form validation in JavaScript. You can expand upon this by adding more fields and more complex validation logic as needed.\par
\b Q.57 how many type of JS Event? How to use it ? \par
\b0 1. Mouse Events\par
click: Triggered when an element is clicked.\par
dblclick: Triggered when an element is double-clicked.\par
mousedown: Triggered when the mouse button is pressed over an element.\par
mouseup: Triggered when the mouse button is released over an element.\par
mouseover: Triggered when the mouse pointer is moved onto an element.\par
mouseout: Triggered when the mouse pointer is moved out of an element.\par
mousemove: Triggered when the mouse pointer is moved while it is over an element.\par
mouseenter: Triggered when the mouse pointer enters the element.\par
mouseleave: Triggered when the mouse pointer leaves the element.\par
2. Keyboard Events\par
keydown: Triggered when a key is pressed down.\par
keyup: Triggered when a key is released.\par
keypress: Triggered when a key is pressed and released (deprecated).\par
3. Form Events\par
submit: Triggered when a form is submitted.\par
reset: Triggered when a form is reset.\par
focus: Triggered when an element gains focus.\par
blur: Triggered when an element loses focus.\par
change: Triggered when the value of an element is changed.\par
input: Triggered when the value of an input element changes.\par
4. Window Events\par
load: Triggered when the whole page has loaded.\par
unload: Triggered when the page is unloaded.\par
resize: Triggered when the window is resized.\par
scroll: Triggered when the window is scrolled.\par
beforeunload: Triggered before the page is unloaded.\par
5. Clipboard Events\par
copy: Triggered when content is copied.\par
cut: Triggered when content is cut.\par
paste: Triggered when content is pasted.\par
6. Drag and Drop Events\par
drag: Triggered when an element is being dragged.\par
dragstart: Triggered at the start of a drag operation.\par
dragend: Triggered at the end of a drag operation.\par
dragover: Triggered when an element is being dragged over a valid drop target.\par
dragenter: Triggered when a dragged element enters a valid drop target.\par
dragleave: Triggered when a dragged element leaves a valid drop target.\par
drop: Triggered when a dragged element is dropped on a valid drop target.\par
7. Media Events\par
play: Triggered when media playback starts.\par
pause: Triggered when media playback is paused.\par
ended: Triggered when media playback ends.\par
volumechange: Triggered when the volume changes.\par
timeupdate: Triggered when the media time is updated.\par
8. Touch Events\par
touchstart: Triggered when a touch point is placed on the touch surface.\par
touchend: Triggered when a touch point is removed from the touch surface.\par
touchmove: Triggered when a touch point is moved along the touch surface.\par
touchcancel: Triggered when a touch point is interrupted.\par
How to Use JavaScript Events\par
JavaScript events can be used by attaching event listeners to HTML elements. There are several ways to add event listeners:\par
\par
1. Inline Event Handlers\par
Directly within the HTML element's attribute.\par
\par
html\par
Copy code\par
<button onclick="alert('Button clicked!')">Click Me</button>\par
2. Traditional DOM Event Handling\par
Using properties of the DOM element.\par
\par
html\par
Copy code\par
<button id="myButton">Click Me</button>\par
<script>\par
  document.getElementById('myButton').onclick = function() \{\par
    alert('Button clicked!');\par
  \};\par
</script>\par
3. Modern Event Handling with addEventListener\par
Using the addEventListener method for more flexibility.\par
html\par
<button id="myButton">Click Me</button>\par
<script>\par
  document.getElementById('myButton').addEventListener('click', function() \{\par
    alert('Button clicked!');\par
  \});\par
</script>\par
Example: Handling Mouse and Keyboard Events\par
html\par
Copy code\par
<!DOCTYPE html>\par
<html>\par
<head>\par
  <title>Event Example</title>\par
</head>\par
<body>\par
\par
<button id="myButton">Click Me</button>\par
<input type="text" id="myInput" placeholder="Type something...">\par
\par
<script>\par
  // Handling a click event\par
  document.getElementById('myButton').addEventListener('click', function() \{\par
    alert('Button clicked!');\par
  \});\par
\par
  // Handling a keydown event\par
  document.getElementById('myInput').addEventListener('keydown', function(event) \{\par
    console.log('Key pressed:', event.key);\par
  \});\par
</script>\par
</body>\par
</html>\par
In this example, a click event is handled for a button, and a keydown event is handled for an input field, demonstrating how to use JavaScript to respond to user interactions on a web page.\par
\b Q.59 What is Bom vs Dom in JS? \par
\b0 DOM (Document Object Model)\par
The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of a web page as a tree of objects. Each element in the HTML document becomes a node in this tree, and the DOM provides methods and properties to access and manipulate these nodes.\par
\par
Key Features of the DOM:\par
Tree Structure: The DOM represents the HTML document as a tree of nodes, including elements, attributes, and text content.\par
Interactivity: JavaScript can interact with the DOM to dynamically change the content, structure, and style of a web page.\par
Standardized: The DOM is a standard defined by the World Wide Web Consortium (W3C).\par
Example Operations:\par
Accessing Elements: document.getElementById('myElement')\par
Creating Elements: document.createElement('div')\par
Modifying Content: element.innerHTML = 'New Content'\par
Event Handling: element.addEventListener('click', function() \{ ... \})\par
Example:\par
html\par
Copy code\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
  <meta charset="UTF-8">\par
  <title>DOM Example</title>\par
</head>\par
<body>\par
  <div id="content">Hello, World!</div>\par
  <button id="changeTextButton">Change Text</button>\par
  <script>\par
    document.getElementById('changeTextButton').addEventListener('click', function() \{\par
      document.getElementById('content').innerHTML = 'Text Changed!';\par
    \});\par
  </script>\par
</body>\par
</html>\par
BOM (Browser Object Model)\par
The Browser Object Model (BOM) provides interaction with the browser itself. It allows JavaScript to control the browser window and interact with the browser features outside of the document content.\par
Key Features of the BOM:\par
Window Object: The window object is the global object in the browser, and it represents the browser window. All global JavaScript objects, functions, and variables automatically become members of the window object.\par
Browser Control: The BOM includes objects like window, navigator, screen, history, location that allow control and access to various parts of the browser.\par
Common BOM Objects:\par
window: Represents the browser window. Methods include alert(), confirm(), open(), close(), and properties like innerWidth, innerHeight.\par
navigator: Contains information about the browser. Properties include navigator.userAgent, navigator.language.\par
location: Contains information about the current URL. Methods include location.assign(), location.reload(), and properties like location.href, location.pathname.\par
history: Allows interaction with the browser's session history. Methods include history.back(), history.forward(), history.go().\par
screen: Contains information about the user's screen. Properties include screen.width, screen.height.\par
Example Operations:\par
Alert Box: window.alert('Hello!')\par
URL Redirection: window.location.href = '{{\field{\*\fldinst{HYPERLINK https://www.example.com }}{\fldrslt{https://www.example.com\ul0\cf0}}}}\f2\fs28 '\par
Browser Navigation: window.history.back()\par
Example:\par
html\par
Copy code\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
  <meta charset="UTF-8">\par
  <title>BOM Example</title>\par
</head>\par
<body>\par
  <button id="alertButton">Show Alert</button>\par
  <button id="redirectButton">Redirect</button>\par
  <script>\par
    document.getElementById('alertButton').addEventListener('click', function() \{\par
      window.alert('This is an alert box!');\par
    \});\par
\par
    document.getElementById('redirectButton').addEventListener('click', function() \{\par
      window.location.href = '{{\field{\*\fldinst{HYPERLINK https://www.example.com }}{\fldrslt{https://www.example.com\ul0\cf0}}}}\f2\fs28 ';\par
    \});\par
  </script>\par
</body>\par
</html>\par
Summary\par
DOM: Deals with the document content. It's used to manipulate HTML elements, attributes, and text within the document.\par
BOM: Deals with the browser environment. It's used to control and interact with the browser itself, such as handling navigation, displaying alerts, and accessing browser-specific information.\par
Understanding both BOM and DOM is essential for developing interactive and dynamic web applications using JavaScript.\par
\b Q.60 Array vs object defences in JS?\b0  \par
Arrays\par
Arrays are ordered collections of data, typically used for storing lists of items where the order is important.\par
Key Features of Arrays:\par
Indexed: Elements in an array are accessed using numeric indices starting from 0.\par
Ordered: The order of elements is preserved, and elements can be iterated in order.\par
Length Property: Arrays have a length property that returns the number of elements in the array.\par
Methods: Arrays come with a variety of built-in methods for manipulation, such as push(), pop(), shift(), unshift(), splice(), slice(), map(), filter(), reduce(), and more.\par
Homogeneous: Although arrays can hold elements of different types, they are typically used for storing collections of similar items.\par
Example of an Array:\par
let fruits = ['apple', 'banana', 'cherry'];\par
// Accessing elements\par
console.log(fruits[0]); // 'apple'\par
\par
// Adding elements\par
fruits.push('date');\par
console.log(fruits); // ['apple', 'banana', 'cherry', 'date']\par
\par
// Removing elements\par
fruits.pop();\par
console.log(fruits); // ['apple', 'banana', 'cherry']\par
\par
// Iterating over elements\par
fruits.forEach(function(fruit) \{\par
  console.log(fruit);\par
\});\par
Objects\par
Objects are collections of key-value pairs, where keys are unique strings (or symbols) and values can be of any type.\par
\par
Key Features of Objects:\par
Key-Value Pairs: Elements in an object are stored as key-value pairs, where keys are strings (or symbols) and values are any type.\par
Unordered: The order of properties is not guaranteed and should not be relied upon.\par
Dynamic Nature: Properties can be added, modified, or deleted dynamically.\par
Methods: Objects can have methods (functions attached to object properties) to perform operations on their data.\par
Heterogeneous: Objects are typically used to represent complex entities with multiple attributes of different types.\par
Example of an Object:\par
javascript\par
Copy code\par
let person = \{\par
  name: 'John',\par
  age: 30,\par
  job: 'developer'\par
\};\par
// Accessing properties\par
console.log(person.name); // 'John'\par
console.log(person['age']); // 30\par
// Adding properties\par
person.city = 'New York';\par
console.log(person); // \{ name: 'John', age: 30, job: 'developer', city: 'New York' \}\par
// Modifying properties\par
person.age = 31;\par
console.log(person.age); // 31\par
// Deleting properties\par
delete person.job;\par
console.log(person); // \{ name: 'John', age: 31, city: 'New York' \}\par
\par
// Iterating over properties\par
for (let key in person) \{\par
  console.log(key + ': ' + person[key]);\par
\}\par
Comparison and Use Cases\par
Use Arrays When:\par
You need an ordered collection of items.\par
You frequently need to access items by their position (index).\par
You need to perform array-specific operations like sorting, mapping, filtering, etc.\par
Use Objects When:\par
You need to represent a complex entity with multiple attributes.\par
You need to access data using descriptive keys (not just numeric indices).\par
You need to dynamically add or modify properties.\par
Summary\par
Arrays: Ordered collections of elements accessed by numeric indices. Ideal for lists and sequences.\par
Objects: Collections of key-value pairs accessed by keys. Ideal for representing complex entities with named attributes.\par
Understanding when to use arrays and objects will help you structure your data more effectively and make your JavaScript code more efficient and readable.\par
\b Q.61 Split the string into an array using split() Method? \par
\b0 The split() method in JavaScript is used to split a string into an array of substrings, based on a specified delimiter. The delimiter can be a string or a regular expression. The split() method returns an array of substrings.\par
Syntax\par
string.split(separator, limit)\par
separator: Optional. Specifies the character, or the regular expression, to use for splitting the string. If omitted, the entire string is returned in the array as the only element.\par
limit: Optional. An integer that specifies a limit on the number of splits to be found. The split method still splits on each occurrence of the separator, but stops when the limit is reached.\par
Examples\par
Basic Usage with a Single Character Separator\par
let str = "Hello World";\par
let arr = str.split(" ");\par
console.log(arr); // Output: ["Hello", "World"]\par
Using a Comma Separator\par
let str = "apple,banana,cherry";\par
let arr = str.split(",");\par
console.log(arr); // Output: ["apple", "banana", "cherry"]\par
Using a Regular Expression as Separator\par
let str = "apple, banana; cherry";\par
let arr = str.split(/[,; ]+/);\par
console.log(arr); // Output: ["apple", "banana", "cherry"]\par
Limiting the Number of Splits\par
let str = "apple,banana,cherry, date";\par
let arr = str.split(",", 2);\par
console.log(arr); // Output: ["apple", "banana"]\par
No Separator Provided\par
If no separator is provided, the entire string is returned as a single-element array.\par
let str = "Hello World";\par
let arr = str.split();\par
console.log(arr); // Output: ["Hello World"]\par
Splitting a String into Characters\par
If an empty string ("") is used as the separator, the string is split between each character.\par
let str = "Hello";\par
let arr = str.split("");\par
console.log(arr); // Output: ["H", "e", "l", "l", "o"]\par
Example in a Function\par
Here is a function that demonstrates splitting a sentence into words:\par
function splitSentence(sentence) \{\par
   return sentence.split(" ");\par
\}\par
let sentence = "This is a test sentence.";\par
let words = splitSentence(sentence);\par
console.log(words); // Output: ["This", "is", "a", "test", "sentence."]\par
By using the split() method, you can easily break down strings into manageable parts for further processing or analysis.\par
\b Q.62 Check if the string contains a word Script using includes() method? \par
\b0 The includes() method in JavaScript is used to determine whether one string may be found within another string, returning true or false as appropriate. This method is case-sensitive.\par
Syntax\par
string.includes(searchString, position)\par
searchString: The string to search for.\par
position: Optional. The position within the string at which to begin searching for searchString. Defaults to 0.\par
Example: Checking if a String Contains a Word\par
 To check if a string contains the word "Script":\par
\par
let str = "JavaScript is a versatile language.";\par
\par
if (str.includes("Script")) \{\par
  console.log("The word 'Script' is found in the string.");\par
\} else \{\par
  console.log("The word 'Script' is not found in the string.");\par
\}\par
Example with Function\par
Here\rquote s a function that checks if a string contains the word "Script":\par
\par
function containsWordScript(inputString) \{\par
  return inputString.includes("Script");\par
\}\par
\par
let testString = "JavaScript is a versatile language.";\par
if (containsWordScript(testString)) \{\par
  console.log("The word 'Script' is found in the string.");\par
\} else \{\par
  console.log("The word 'Script' is not found in the string.");\par
\}\par
Case Sensitivity\par
The includes() method is case-sensitive, which means "script" and "Script" will be treated differently. If you want to perform a case-insensitive check, you can convert both the string and the search term to lowercase (or uppercase) before using includes().\par
\par
Example: Case-Insensitive Check\par
javascript\par
Copy code\par
function containsWordScriptCaseInsensitive(inputString) \{\par
  return inputString.toLowerCase().includes("script");\par
\}\par
\par
let testString1 = "JavaScript is a versatile language.";\par
let testString2 = "This script is useful.";\par
\par
console.log(containsWordScriptCaseInsensitive(testString1)); // Output: true\par
console.log(containsWordScriptCaseInsensitive(testString2)); // Output: true\par
In this example, both "JavaScript" and "script" will match because we converted the entire string to lowercase before performing the check.\par
Summary\par
The includes() method is a straightforward way to check if a string contains a specific substring. It's case-sensitive by default, but you can easily perform a case-insensitive check by converting the strings to the same case before using includes().\par
\b Q.63 Change all the string characters to lowercase letters using toLowerCase() Method. \par
\b0 You can use the toLowerCase() method in JavaScript to convert all characters of a string to lowercase. This method doesn't modify the original string but returns a new string with all lowercase characters.\par
let str = "Hello World!";\par
let lowerCaseStr = str.toLowerCase();\par
console.log(lowerCaseStr); // Output: "hello world!"\par
Example with a Function:\par
function convertToLowerCase(inputString) \{\par
  return inputString.toLowerCase();\par
\}\par
let str = "Hello World!";\par
let lowerCaseStr = convertToLowerCase(str);\par
console.log(lowerCaseStr); // Output: "hello world!"\par
Using toLowerCase() with User Input:\par
let userInput = prompt("Enter a string:");\par
let lowerCaseString = userInput.toLowerCase();\par
console.log("Lowercase string:", lowerCaseString);\par
Important Notes:\par
The toLowerCase() method returns a new string with all alphabetic characters converted to lowercase.\par
It does not modify the original string; it creates and returns a new string.\par
Non-alphabetic characters (such as numbers, symbols, etc.) remain unchanged.\par
Summary:\par
The toLowerCase() method is handy when you need to work with case-insensitive comparisons or when you want to standardize the case of strings in your application. It's simple to use and returns a new string with all characters converted to lowercase.\par
\b Q.64 What is Character at index 15 in \rquote 30 Days of JavaScript\rquote  string? Use charAt() method. \par
\b0 Example:\par
let str = '30 Days of JavaScript';\par
let charAtIndex15 = str.charAt(15);\par
console.log(charAtIndex15); // Output: 'S'\par
Explanation:\par
In JavaScript, strings are zero-indexed, meaning the first character is at index 0.\par
The character at index 15 in the string '30 Days of JavaScript' is 'S', as the letter 'S' is the 16th character in the string.\par
Note that the space character counts as a character in the index.\par
Summary:\par
The charAt() method is used to get the character at a specified index in a string. It's useful for accessing individual characters within a string by their position.\par
\b Q.65 copy to one string to another string in JS? \par
\b0 Using Assignment:\par
You can simply assign the value of one string variable to another.\par
let str1 = 'Hello';\par
let str2 = str1;\par
console.log(str2); // Output: 'Hello'\par
Using String Concatenation:\par
You can concatenate the string with an empty string ('').\par
let str1 = 'Hello';\par
let str2 = '' + str1;\par
console.log(str2); // Output: 'Hello'\par
Using String Methods (slice, substring, substr):\par
You can use string manipulation methods like slice(), substring(), or substr().\par
let str1 = 'Hello';\par
let str2 = str1.slice();\par
console.log(str2); // Output: 'Hello'\par
Using Spread Operator (ES6+):\par
You can use the spread operator ....\par
let str1 = 'Hello';\par
let str2 = [...str1].join('');\par
console.log(str2); // Output: 'Hello'\par
Using String.fromCharCode() (for single character strings):\par
let char = 'H';\par
let copyChar = String.fromCharCode(char.charCodeAt(0));\par
console.log(copyChar); // Output: 'H'\par
Using String.prototype.toString():\par
let str1 = new String('Hello');\par
let str2 = str1.toString();\par
console.log(str2); // Output: 'Hello'\par
Using String.prototype.valueOf():\par
let str1 = new String('Hello');\par
let str2 = str1.valueOf();\par
console.log(str2); // Output: 'Hello'\par
Note:\par
All of these methods will create a copy of the original string.\par
Be cautious with methods like slice(), substring(), and substr() as they are primarily used for extracting parts of strings. When used without arguments, they return a copy of the original string.\par
Choose the method that suits your use case and programming style best. The most common and straightforward method is assignment (=), but other methods offer flexibility and different ways to manipulate strings.\par
\b Q.66 Find the length of a string without using libraryFunction?\par
\b0 To find the length of a string without using a library function, you can iterate through each character in the string and count the number of characters. Here's a simple implementation in Python:\par
def string_length(s):\par
    count = 0\par
    for char in s:\par
        count += 1\par
    return count\par
\par
# Example usage\par
input_string = "Hello, World!"\par
length = string_length(input_string)\par
print(f"The length of the string is: \{length\}")\par
This code defines a function string_length that takes a string s as an input and returns its length by counting each character in the string using a loop.\par
\bullet  What is JavaScript?\par
JavaScript is a high-level, interpreted programming language that is commonly used to create interactive effects within web browsers. It is a key technology of the World Wide Web, alongside HTML and CSS. JavaScript enables dynamic content on websites, such as interactive forms, animations, and complex user interactions. Here are some key points about JavaScript:\par
\par
Interpreted Language: JavaScript code is executed directly by the web browser without the need for prior compilation.\par
\par
Client-Side Scripting: It runs on the client side (the user's browser), which allows for creating interactive and dynamic web pages.\par
\par
Versatile and Dynamic: JavaScript is flexible and can be used for a variety of tasks, from simple form validation to complex animations and web applications.\par
\par
Event-Driven: JavaScript can respond to user events such as mouse clicks, form submissions, and keyboard input.\par
\par
Object-Oriented: Although JavaScript is often considered a prototype-based language, it supports object-oriented programming principles.\par
\par
Asynchronous Programming: JavaScript supports asynchronous programming with features like callbacks, promises, and the async/await syntax, making it suitable for tasks like fetching data from servers without blocking the main thread.\par
\par
Cross-Platform: JavaScript can run on any platform with a web browser, making it highly versatile for web development.\par
\par
Rich Ecosystem: JavaScript has a vast ecosystem of libraries and frameworks such as React, Angular, Vue.js, and Node.js, which extend its capabilities to front-end, back-end, and even mobile app development.\par
\par
Standardized: JavaScript is standardized by ECMAScript (ES), which defines the core language and its features.\par
\par
Overall, JavaScript is an essential tool for web developers, enabling the creation of dynamic and responsive web applications.\par
\b\bullet  What is the use of isNaN function?\par
\b0 The isNaN function in JavaScript is used to determine whether a value is NaN (Not-a-Number). NaN is a special value in JavaScript that represents a value that is not a legal number. The isNaN function helps in checking if a given value is NaN.\par
\par
Here is how isNaN works:\par
Syntax:\par
isNaN(value)\par
value: The value to be tested.\par
 Return Value:\par
true if the value is NaN.\par
false if the value is not NaN.\par
Behavior:\par
\par
isNaN first tries to convert the value to a number. If the conversion fails and results in NaN, it returns true. Otherwise, it returns false.\par
Examples:\par
isNaN(NaN);            // true\par
isNaN("hello");        // true, "hello" is not a number\par
isNaN(undefined);      // true, undefined cannot be converted to a number\par
isNaN(\{\});             // true, an object cannot be converted to a number\par
\par
isNaN(123);            // false, 123 is a number\par
isNaN("123");          // false, "123" can be converted to a number\par
isNaN(true);           // false, true can be converted to 1\par
isNaN(false);          // false, false can be converted to 0\par
Caveats:\par
The isNaN function has a behavior that might be confusing in some cases because it coerces the argument to a number before checking if it's NaN. This means that some non-number values might return true even though they are not NaN.\par
For example, isNaN("hello") returns true because "hello" cannot be converted to a number.\par
ES6 Number.isNaN:\par
To address the coercion issue, ES6 introduced Number.isNaN, which does not coerce the argument.\par
Number.isNaN only returns true if the value is actually NaN.\par
Number.isNaN(NaN);        // true\par
Number.isNaN("hello");    // false, "hello" is not NaN\par
Number.isNaN(undefined);  // false, undefined is not NaN\par
Number.isNaN(\{\});         // false, an object is not NaN\par
\par
Number.isNaN(123);        // false, 123 is not NaN\par
Number.isNaN("123");      // false, "123" is not NaN\par
Number.isNaN(true);       // false, true is not NaN\par
Number.isNaN(false);      // false, false is not NaN\par
In summary, the isNaN function is useful for checking if a value is NaN, but be aware of its coercion behavior. For more accurate checks without coercion, Number.isNaN is recommended.\par
\b\bullet  What is negative Infinity?\par
\b0 Negative Infinity in JavaScript is a special numeric value that represents a value less than any other number. It is a property of the global Number object and can be accessed as Number.NEGATIVE_INFINITY. This value is typically used to represent an overflow condition in calculations or as a result of dividing a negative number by zero.\par
Here are some key points about Negative Infinity:\par
Representation:\par
In JavaScript, Negative Infinity is represented as -Infinity.\par
Comparison:\par
Negative Infinity is less than any other number, including any negative number.\par
console.log(-Infinity < -1000); // true\par
console.log(-Infinity < 0);     // true\par
console.log(-Infinity < Infinity); // true\par
Operations:\par
Performing arithmetic operations with Negative Infinity will generally result in Negative Infinity or NaN, depending on the operation.\par
console.log(-Infinity + 1);  // -Infinity\par
console.log(-Infinity - 1);  // -Infinity\par
console.log(-Infinity * 2);  // -Infinity\par
console.log(-Infinity / 2);  // -Infinity\par
console.log(1 / -Infinity);  // -0 (negative zero)\par
console.log(-Infinity / 0);  // -Infinity\par
Division by Zero:\par
\par
Dividing a negative number by zero results in Negative Infinity.\par
console.log(-1 / 0); // -Infinity\par
Properties:\par
Negative Infinity is a static property of the Number object and can be referenced using Number.NEGATIVE_INFINITY.\par
console.log(Number.NEGATIVE_INFINITY); // -Infinity\par
Usage in Comparisons:\par
You can use Negative Infinity as a sentinel value to represent the smallest possible value in algorithms that involve comparisons.\par
let minValue = Number.NEGATIVE_INFINITY;\par
let values = [3, -2, 7, -10, 4];\par
for (let value of values) \{\par
    if (value > minValue) \{\par
        minValue = value;\par
    \}\par
\}\par
console.log(minValue); // 7\par
Special Case with NaN:\par
Comparing Negative Infinity with NaN results in false because NaN is not equal to, less than, or greater than any number.\par
console.log(-Infinity > NaN);  // false\par
console.log(-Infinity < NaN);  // false\par
console.log(-Infinity == NaN); // false\par
In summary, Negative Infinity in JavaScript is a special value that represents an infinitely small number. It is useful in various numerical computations and algorithms, especially those involving\par
\b\bullet  Which company developed JavaScript?\par
\b0 JavaScript was developed by Netscape Communications Corporation. It was created by Brendan Eich in 1995 while he was working at Netscape. The language was initially called Mocha, then renamed to LiveScript, and finally to JavaScript to align with the popularity of Java at that time. Netscape introduced JavaScript in their Netscape Navigator 2.0 browser.\par
\par
Here are some key points regarding JavaScript's development:\par
\par
Creator: Brendan Eich\par
Year of Creation: 1995\par
Initial Name: Mocha\par
Subsequent Names: LiveScript, then JavaScript\par
Company: Netscape Communications Corporation\par
JavaScript quickly became popular and was later standardized by the European Computer Manufacturers Association (ECMA) as ECMAScript. The first edition of the ECMAScript standard was published in 1997, ensuring that JavaScript would be implemented consistently across different web browsers.\par
\b\bullet  What are undeclared and undefined variables?\par
\b0 In JavaScript, undeclared and undefined variables have distinct meanings and implications:\par
\par
Undeclared Variables\par
Definition: A variable that has been used in the code without being declared using the var, let, or const keywords.\par
\par
Example:\par
function example() \{\par
    x = 10; // x is undeclared\par
    console.log(x);\par
\}\par
example();\par
In the example above, x is assigned a value without being declared. This makes x an undeclared variable.\par
\par
Implications:\par
\par
If you assign a value to an undeclared variable within a function, it becomes a global variable, which can lead to potential bugs and conflicts, especially in larger programs.\par
In strict mode ('use strict';), assigning a value to an undeclared variable will result in a ReferenceError.\par
Undefined Variables\par
Definition: A variable that has been declared but not assigned a value.\par
Example:\par
let y;\par
console.log(y); // y is declared but undefined\par
In the example above, y is declared using let but has not been assigned a value, so it is undefined.\par
\par
Implications:\par
\par
Accessing an undefined variable does not throw an error; instead, it returns the special value undefined.\par
It is possible to explicitly assign undefined to a variable, though this is not common practice.\par
Comparison and Key Points\par
Undeclared Variables:\par
\par
Not declared using var, let, or const.\par
Implicitly creates a global variable (unless in strict mode).\par
Causes a ReferenceError in strict mode.\par
Undefined Variables:\par
\par
Declared but not initialized with a value.\par
Holds the value undefined until a value is assigned.\par
Safe to access, returns undefined.\par
Example to Illustrate the Difference\par
javascript\par
Copy code\par
function checkVariables() \{\par
    // Undeclared variable\par
    a = 5; // Creates a global variable 'a' (not recommended)\par
\par
    // Declared but undefined variable\par
    let b;\par
    \par
    console.log(a); // 5\par
    console.log(b); // undefined\par
\par
    // In strict mode, the following line would throw a ReferenceError\par
    // 'use strict';\par
    // c = 10; // ReferenceError: c is not defined\par
\}\par
checkVariables();\par
console.log(a); // 5\par
// console.log(b); // ReferenceError: b is not defined (b is scoped within the function)\par
Best Practices\par
Always declare variables using var, let, or const to avoid unintended global variables and potential bugs.\par
Use let or const for block-scoped variables and prefer const for constants.\par
Be cautious with variables that might be undefined and handle them appropriately to avoid runtime errors.\par
Understanding the distinction between undeclared and undefined variables is crucial for writing robust and error-free JavaScript code.\par
\b\bullet  Write the code for adding new elements dynamically?\b0\par
Negative Infinity in JavaScript is a special numeric value that represents a value less than any other number. It is a property of the global Number object and can be accessed as Number.NEGATIVE_INFINITY. This value is typically used to represent an overflow condition in calculations or as a result of dividing a negative number by zero.\par
Here are some key points about Negative Infinity:\par
Representation:\par
In JavaScript, Negative Infinity is represented as -Infinity.\par
Comparison:\par
Negative Infinity is less than any other number, including any negative number.\par
console.log(-Infinity < -1000); // true\par
console.log(-Infinity < 0);     // true\par
console.log(-Infinity < Infinity); // true\par
Operations:\par
Performing arithmetic operations with Negative Infinity will generally result in Negative Infinity or NaN, depending on the operation.\par
console.log(-Infinity + 1);  // -Infinity\par
console.log(-Infinity - 1);  // -Infinity\par
console.log(-Infinity * 2);  // -Infinity\par
console.log(-Infinity / 2);  // -Infinity\par
console.log(1 / -Infinity);  // -0 (negative zero)\par
console.log(-Infinity / 0);  // -Infinity\par
Division by Zero:\par
\par
Dividing a negative number by zero results in Negative Infinity.\par
console.log(-1 / 0); // -Infinity\par
Properties:\par
\par
Negative Infinity is a static property of the Number object and can be referenced using Number.NEGATIVE_INFINITY.\par
javascript\par
Copy code\par
console.log(Number.NEGATIVE_INFINITY); // -Infinity\par
Usage in Comparisons:\par
\par
You can use Negative Infinity as a sentinel value to represent the smallest possible value in algorithms that involve comparisons.\par
let minValue = Number.NEGATIVE_INFINITY;\par
let values = [3, -2, 7, -10, 4];\par
for (let value of values) \{\par
    if (value > minValue) \{\par
        minValue = value;\par
    \}\par
\}\par
console.log(minValue); // 7\par
Special Case with NaN:\par
Comparing Negative Infinity with NaN results in false because NaN is not equal to, less than, or greater than any number.\par
console.log(-Infinity > NaN);  // false\par
console.log(-Infinity < NaN);  // false\par
console.log(-Infinity == NaN); // false\par
In summary, Negative Infinity in JavaScript is a special value that represents an infinitely small number. It is useful in various numerical computations and algorithms, especially those involving comparisons and overflow conditions.\par
\b\bullet  Which company developed JavaScript?\b0\par
JavaScript was developed by Netscape Communications Corporation. It was created by Brendan Eich in 1995 while he was working at Netscape. The language was initially called Mocha, then renamed to LiveScript, and finally to JavaScript to align with the popularity of Java at that time. Netscape introduced JavaScript in their Netscape Navigator 2.0 browser.\par
\par
Here are some key points regarding JavaScript's development:\par
\par
Creator: Brendan Eich\par
Year of Creation: 1995\par
Initial Name: Mocha\par
Subsequent Names: LiveScript, then JavaScript\par
Company: Netscape Communications Corporation\par
JavaScript quickly became popular and was later standardized by the European Computer Manufacturers Association (ECMA) as ECMAScript. The first edition of the ECMAScript standard was published in 1997, ensuring that JavaScript would be implemented consistently across different web browsers.\par
\par
\b\bullet  What are undeclared and undefined variables?\b0\par
In JavaScript, undeclared and undefined variables have distinct meanings and implications:\par
\par
Undeclared Variables\par
Definition: A variable that has been used in the code without being declared using the var, let, or const keywords.\par
\par
Example:\par
function example() \{\par
    x = 10; // x is undeclared\par
    console.log(x);\par
\}\par
example();\par
In the example above, x is assigned a value without being declared. This makes x an undeclared variable.\par
\par
Implications:\par
\par
If you assign a value to an undeclared variable within a function, it becomes a global variable, which can lead to potential bugs and conflicts, especially in larger programs.\par
In strict mode ('use strict';), assigning a value to an undeclared variable will result in a ReferenceError.\par
Undefined Variables\par
Definition: A variable that has been declared but not assigned a value.\par
Example:\par
let y;\par
console.log(y); // y is declared but undefined\par
In the example above, y is declared using let but has not been assigned a value, so it is undefined.\par
Implications:\par
Accessing an undefined variable does not throw an error; instead, it returns the special value undefined.\par
It is possible to explicitly assign undefined to a variable, though this is not common practice.\par
Comparison and Key Points\par
Undeclared Variables:\par
\par
Not declared using var, let, or const.\par
Implicitly creates a global variable (unless in strict mode).\par
Causes a ReferenceError in strict mode.\par
Undefined Variables:\par
\par
Declared but not initialized with a value.\par
Holds the value undefined until a value is assigned.\par
Safe to access, returns undefined.\par
Example to Illustrate the Difference\par
function checkVariables() \{\par
    // Undeclared variable\par
    a = 5; // Creates a global variable 'a' (not recommended)\par
\par
    // Declared but undefined variable\par
    let b;\par
    \par
    console.log(a); // 5\par
    console.log(b); // undefined\par
\par
    // In strict mode, the following line would throw a ReferenceError\par
    // 'use strict';\par
    // c = 10; // ReferenceError: c is not defined\par
\}\par
\par
checkVariables();\par
console.log(a); // 5\par
// console.log(b); // ReferenceError: b is not defined (b is scoped within the function)\par
Best Practices\par
Always declare variables using var, let, or const to avoid unintended global variables and potential bugs.\par
Use let or const for block-scoped variables and prefer const for constants.\par
Be cautious with variables that might be undefined and handle them appropriately to avoid runtime errors.\par
Understanding the distinction between undeclared and undefined variables is crucial for writing robust and error-free JavaScript code.\par
\par
\b\bullet  Write the code for adding new elements dynamically?\par
\b0 To dynamically add new elements to a web page using JavaScript, you can manipulate the DOM (Document Object Model). Here's an example that demonstrates how to add a new element to an existing HTML structure:\par
\par
HTML Structure\par
First, let's have a simple HTML structure where we will dynamically add new elements.\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
    <meta charset="UTF-8">\par
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
    <title>Dynamically Add Elements</title>\par
</head>\par
<body>\par
    <div id="container">\par
        <p>Existing content in the container.</p>\par
    </div>\par
    <button id="addElementButton">Add Element</button>\par
\par
    <script src="script.js"></script>\par
</body>\par
</html>\par
Now, let's write the JavaScript code in script.js to dynamically add new elements when the button is clicked.\par
document.getElementById('addElementButton').addEventListener('click', function() \{\par
    // Create a new element (e.g., a new paragraph)\par
    const newElement = document.createElement('p');\par
\par
    // Add content to the new element\par
    newElement.textContent = 'This is a dynamically added paragraph.';\par
\par
    // Optionally, you can set attributes or styles\par
    newElement.style.color = 'blue';\par
\par
    // Append the new element to an existing container\par
    const container = document.getElementById('container');\par
    container.appendChild(newElement);\par
\});\par
Explanation\par
HTML Structure:\par
\par
A div with an id of container where new elements will be added.\par
A button with an id of addElementButton that will trigger the addition of new elements when clicked.\par
JavaScript Code:\par
\par
The addEventListener method is used to attach a click event handler to the button.\par
document.createElement('p') creates a new paragraph element.\par
newElement.textContent = '...' sets the content of the new paragraph.\par
newElement.style.color = 'blue' sets the text color of the new paragraph to blue.\par
document.getElementById('container').appendChild(newElement) appends the new paragraph to the container div.\par
When you click the "Add Element" button, a new paragraph element will be created and added to the container div, demonstrating dynamic DOM manipulation.\par
\b\bullet  What is the difference between ViewState and SessionState?\par
Vi\b0 ewState and SessionState are both state management techniques used in web applications, but they serve different purposes and have distinct characteristics. Here's a detailed comparison:\par
\par
ViewState\par
Scope:\par
\par
ViewState is used to maintain the state of a web page across postbacks. It preserves the state of controls (like text boxes, labels, etc.) within the same page.\par
Storage:\par
\par
ViewState data is stored in a hidden field on the same page. This data is sent to the server and returned back to the client with each postback.\par
Lifespan:\par
\par
ViewState lasts for the duration of the page's lifecycle, meaning it is available as long as the user is interacting with the same page.\par
Security:\par
\par
ViewState can be easily tampered with because it is stored in a hidden field on the client side. However, it can be encrypted to improve security.\par
Usage:\par
\par
ViewState is ideal for maintaining the state of controls on a single page, such as user inputs in forms.\par
Performance:\par
\par
ViewState can add to the page's load time and bandwidth usage because the state data is sent back and forth between the client and server with each postback.\par
SessionState\par
Scope:\par
\par
SessionState is used to maintain user-specific data for the duration of a user's session across multiple web pages.\par
Storage:\par
\par
SessionState data is stored on the server. By default, it is stored in memory, but it can be configured to be stored in other mediums like a SQL Server, State Server, or a custom storage provider.\par
Lifespan:\par
\par
SessionState lasts for the duration of the user's session. By default, this is 20 minutes of inactivity, but it can be configured to a different timeout value.\par
Security:\par
\par
SessionState is more secure than ViewState as it is stored on the server. However, session identifiers (usually cookies) are sent between the client and server to maintain the session.\par
Usage:\par
\par
SessionState is ideal for storing user-specific data that needs to be accessed across multiple pages, such as user preferences, shopping cart items, or authentication tokens.\par
Performance:\par
\par
SessionState can impact server memory and resources, especially if storing large amounts of data or if many users are simultaneously active.\par
Summary\par
ViewState:\par
\par
Scope: Single page.\par
Storage: Hidden field on the page (client-side).\par
Lifespan: Duration of the page lifecycle.\par
Security: Less secure (can be encrypted).\par
Usage: Maintain state of controls on a page.\par
Performance: Affects page load time and bandwidth.\par
SessionState:\par
\par
Scope: Across multiple pages.\par
Storage: Server-side.\par
Lifespan: Duration of user session.\par
Security: More secure (stored on server).\par
Usage: Maintain user-specific data across pages.\par
Performance: Affects server memory and resources.\par
In summary, use ViewState for maintaining the state of controls on a single page during postbacks, and use SessionState for storing user-specific data that needs to persist across multiple pages during a user's session.\par
\b\bullet  What is === operator?\par
\b0 The === operator in JavaScript is known as the "strict equality" operator. It compares two values for equality, but it does so without performing type conversion. This means that both the value and the type must be the same for the comparison to return true.\par
\par
Characteristics of the === Operator\par
Type and Value Comparison:\par
\par
The === operator checks both the type and the value of the operands. If either the type or the value differs, the comparison will return false.\par
No Type Coercion:\par
\par
Unlike the == operator (the "loose equality" operator), === does not perform type coercion. Type coercion means converting one or both values to a common type before making the comparison.\par
Examples\par
Same Type and Value:\par
5 === 5;        // true (both are numbers and have the same value)\par
'hello' === 'hello';  // true (both are strings and have the same value)\par
Different Types:\par
5 === '5';      // false (number vs. string)\par
true === 1;     // false (boolean vs. number)\par
Different Values:\par
5 === 6;        // false (same type, different values)\par
'hello' === 'world';  // false (same type, different values)\par
Comparison with == Operator\par
The == operator (loose equality) performs type coercion before comparing, which can lead to some surprising results:\par
5 == '5';       // true (string '5' is coerced to number 5)\par
true == 1;      // true (boolean true is coerced to number 1)\par
null == undefined;  // true (null and undefined are considered equal in loose equality)\par
Due to the lack of type coercion, === is generally preferred over == because it avoids unexpected behavior by ensuring that both the type and value must be the same for the comparison to be true.\par
Best Practices\par
Use === when you want to ensure strict equality without any type conversion.\par
Use == only when you are aware of the type coercion rules and specifically need that behavior.\par
By using ===, you make your code more predictable and easier to understand, reducing the chances of bugs due to unexpected type conversions.\par
\b\bullet  How can the style/class of an element be changed?\par
\b0 Changing the Style of an Element:\par
Using JavaScript:\par
You can directly manipulate the style property of the element.\par
// Get the element\par
var element = document.getElementById('elementId');\par
\par
// Change style properties\par
element.style.color = 'red';\par
element.style.backgroundColor = 'yellow';\par
Using CSS Classes:\par
Apply predefined CSS classes to the element.\par
// Add a class\par
element.classList.add('className');\par
\par
// Remove a class\par
element.classList.remove('className');\par
\par
// Toggle a class\par
element.classList.toggle('className');\par
\par
// Check if the class exists\par
var hasClass = element.classList.contains('className');\par
Example:\par
Let's say you have an HTML element like this:\par
\par
<div id="myElement" class="defaultStyle">Hello, World!</div>\par
You can change its style or class using JavaScript:\par
// Changing style\par
var element = document.getElementById('myElement');\par
element.style.color = 'blue';\par
element.style.backgroundColor = 'yellow';\par
\par
// Changing class\par
element.classList.add('newStyle');\par
element.classList.remove('defaultStyle');\par
Summary:\par
Style Properties: Directly manipulate the style property of the element.\par
CSS Classes: Use classList methods to add, remove, toggle, or check classes.\par
These methods give you flexibility in dynamically changing the appearance of elements based on various conditions or events.\par
In JavaScript, you can read and write files using different methods, depending on whether you are working in a browser environment or in a Node.js environment.\par
\par
### Reading a File:\par
\par
#### Browser Environment (Client-Side):\par
\par
```javascript\par
// Using FileReader API\par
function readFile(input) \{\par
    const file = input.files[0];\par
    const reader = new FileReader();\par
\par
    reader.onload = function(event) \{\par
        const content = event.target.result;\par
        console.log('File content:', content);\par
        // Do something with the content\par
    \};\par
\par
    reader.onerror = function(event) \{\par
        console.error('File could not be read! Code ' + event.target.error.code);\par
    \};\par
\par
    reader.readAsText(file);\par
\}\par
\par
// HTML:\par
// <input type="file" onchange="readFile(this)">\par
```\par
\par
#### Node.js Environment (Server-Side):\par
\par
```javascript\par
const fs = require('fs');\par
\par
fs.readFile('file.txt', 'utf8', function(err, data) \{\par
    if (err) \{\par
        console.error('Error reading {{\field{\*\fldinst{HYPERLINK file:' }}{\fldrslt{file:'\ul0\cf0}}}}\f2\fs28 , err);\par
        return;\par
    \}\par
    console.log('File content:', data);\par
    // Do something with the content\par
\});\par
```\par
\par
### Writing to a File:\par
\par
#### Browser Environment (Client-Side) - Not Directly Possible:\par
\par
In the browser environment, JavaScript does not have direct access to write files for security reasons. However, you can generate files and let users download them.\par
\par
```javascript\par
function downloadFile() \{\par
    const content = 'Hello, World!';\par
    const blob = new Blob([content], \{ type: 'text/plain' \});\par
    const url = window.URL.createObjectURL(blob);\par
    const a = document.createElement('a');\par
    a.href = url;\par
    a.download = 'file.txt';\par
    a.click();\par
    window.URL.revokeObjectURL(url);\par
\}\par
\par
// HTML:\par
// <button onclick="downloadFile()">Download File</button>\par
```\par
\par
#### Node.js Environment (Server-Side):\par
\par
```javascript\par
const fs = require('fs');\par
\par
const content = 'Hello, World!';\par
\par
fs.writeFile('file.txt', content, function(err) \{\par
    if (err) \{\par
        console.error('Error writing {{\field{\*\fldinst{HYPERLINK file:' }}{\fldrslt{file:'\ul0\cf0}}}}\f2\fs28 , err);\par
        return;\par
    \}\par
    console.log('File written successfully!');\par
\});\par
```\par
\par
### Summary:\par
\par
- **Browser Environment:**\par
  - Use FileReader API for reading files.\par
  - Writing files directly is not possible due to browser security restrictions, but you can generate files for download.\par
\par
- **Node.js Environment:**\par
  - Use `fs.readFile()` to read files.\par
  - Use `fs.writeFile()` to write files.\par
\par
Remember to handle errors appropriately, especially when dealing with file operations.\par
\b\bullet  What are all the looping structures in JavaScript?\par
\b0 JavaScript offers several looping structures to iterate over arrays, objects, or perform repetitive tasks. Here are the main looping structures in JavaScript:\par
\par
1. for Loop:\par
The for loop repeats a block of code a specified number of times.\par
for (initialization; condition; increment/decrement) \{\par
    // code to be executed\par
\}\par
Example:\par
for (let i = 0; i < 5; i++) \{\par
    console.log(i);\par
\}\par
2. while Loop:\par
The while loop repeats a block of code as long as a specified condition is true.\par
while (condition) \{\par
    // code to be executed\par
\}\par
Example:\par
let i = 0;\par
while (i < 5) \{\par
    console.log(i);\par
    i++;\par
\}\par
3. do...while Loop:\par
The do...while loop is similar to the while loop, but the condition is evaluated after the block of code is executed, ensuring that the code block is executed at least once.\par
do \{\par
    // code to be executed\par
\} while (condition);\par
Example:\par
let i = 0;\par
do \{\par
    console.log(i);\par
    i++;\par
\} while (i < 5);\par
4. for...in Loop:\par
The for...in loop iterates over the enumerable properties of an object.\par
for (variable in object) \{\par
    // code to be executed\par
\}\par
Example:\par
const person = \{ name: 'John', age: 30 \};\par
for (let key in person) \{\par
    console.log(key + ': ' + person[key]);\par
\}\par
5. for...of Loop:\par
The for...of loop iterates over iterable objects (arrays, strings, maps, sets, etc.), providing the ability to access the values directly.\par
for (variable of iterable) \{\par
    // code to be executed\par
\}\par
Example:\par
const arr = [1, 2, 3, 4, 5];\par
for (let value of arr) \{\par
    console.log(value);\par
\}\par
Summary:\par
for: Used when the number of iterations is known.\par
while: Used when the number of iterations is not known beforehand.\par
do...while: Similar to while, but guarantees at least one execution.\par
for...in: Used for iterating over object properties.\par
for...of: Used for iterating over iterable objects directly.\par
Each looping structure has its use cases, so choose the one that fits your scenario best.\par
\b\bullet  How can you convert the string of any base to an integer in JavaScript?\par
\b0 You can convert a string representing a number in any base to an integer in JavaScript using the parseInt() function and specifying the base as the second argument. Here's how:\par
\par
javascript\par
Copy code\par
const numString = '1010'; // Example string representing a number\par
const base = 2; // Base of the number (binary in this case)\par
\par
const integerValue = parseInt(numString, base);\par
console.log(integerValue); // Output: 10\par
In this example, parseInt() converts the numString from binary (base 2) to its equivalent integer value.\par
Example:\par
// Convert a hexadecimal string to integer\par
const hexString = '1A';\par
const hexToInt = parseInt(hexString, 16);\par
console.log(hexToInt); // Output: 26\par
// Convert an octal string to integer\par
const octString = '77';\par
const octToInt = parseInt(octString, 8);\par
console.log(octToInt); // Output: 63\par
// Convert a binary string to integer\par
const binString = '101010';\par
const binToInt = parseInt(binString, 2);\par
console.log(binToInt); // Output: 42\par
Note:\par
The parseInt() function parses a string and returns an integer.\par
The second argument specifies the base of the number you're converting from.\par
The base can be between 2 and 36. If omitted, JavaScript assumes base 10.\par
Keep in mind that parseInt() will ignore any non-digit characters after parsing the number. If you want to ensure the entire string represents a valid number in the specified base, you may want to check for that separately\b .\par
\bullet  What is the function of the delete operator?\par
\b0 The delete operator in JavaScript is used to remove a property from an object or an element from an array. Its function depends on the context in which it's used:\par
Deleting Object Properties:\par
const obj = \{ foo: 'bar', baz: 'qux' \};\par
delete obj.foo; // Deletes the property 'foo' from obj\par
console.log(obj); // Output: \{ baz: 'qux' \}\par
Deleting Array Elements:\par
const arr = [1, 2, 3, 4, 5];\par
delete arr[2]; // Deletes the element at index 2 (leaves an empty slot)\par
console.log(arr); // Output: [1, 2, empty, 4, 5]\par
Deleting Array Elements (not recommended):\par
const arr = [1, 2, 3, 4, 5];\par
arr.splice(2, 1); // Removes 1 element at index 2\par
console.log(arr); // Output: [1, 2, 4, 5]\par
Deleting Variables:\par
let x = 10;\par
console.log(x); // Output: 10\par
delete x; // Doesn't delete the variable, only properties of objects\par
console.log(x); // Output: 10\par
Note:\par
For arrays, using delete leaves a hole in the array. The length of the array is not affected, and the deleted element becomes undefined.\par
For objects, delete removes the specified property. After deletion, the property will no longer exist.\par
Using delete on variables declared with var, let, or const has no effect, as it only works on object properties.\par
Be cautious:\par
delete is not suitable for removing array elements. It's better to use splice() method for arrays.\par
Deleting properties may have performance implications, especially on objects with many properties. It doesn't reclaim memory; it just removes the reference to the property.\par
Example:\par
const obj = \{ foo: 'bar', baz: 'qux' \};\par
console.log(obj.foo); // Output: 'bar'\par
delete obj.foo;\par
console.log(obj.foo); // Output: undefined (property doesn't exist)\par
The delete operator is mainly used to remove properties from objects dynamically.\par
\b\bullet  What are all the types of Pop up boxes available in JavaScript?\b0\par
JavaScript provides several types of popup boxes or dialog boxes for interacting with users. Here are the main ones:\par
\par
1. Alert Box:\par
Displays a message to the user with an OK button.\par
alert("This is an alert box!");\par
2. Confirm Box:\par
Asks the user to confirm or cancel an action. Returns true if OK is clicked, and false if Cancel is clicked.\par
const result = confirm("Do you want to proceed?");\par
console.log(result); // true or false\par
3. Prompt Box:\par
Asks the user to input text. Returns the text entered by the user or null if canceled.\par
const userInput = prompt("Please enter your name:", "John Doe");\par
console.log(userInput); // User input or null\par
Summary:\par
Alert Box: Used to display messages to the user.\par
Confirm Box: Used to confirm an action with the user.\par
Prompt Box: Used to get input from the user.\par
Example:\par
// Alert Box\par
alert("This is an alert box!");\par
// Confirm Box\par
const confirmed = confirm("Do you want to proceed?");\par
if (confirmed) \{\par
    console.log("User confirmed!");\par
\} else \{\par
    console.log("User canceled!");\par
\}\par
// Prompt Box\par
const userInput = prompt("Please enter your name:", "John Doe");\par
if (userInput !== null) \{\par
    console.log("Hello, " + userInput + "!");\par
\} else \{\par
    console.log("User canceled the prompt.");\par
\}\par
Popup boxes are useful for simple user interactions and can be used to gather information or confirm actions in web applications. However, excessive use of these popups can be disruptive to the user experience, so they should be used judiciously.\par
\b\bullet  What is the use of Void (0)?\par
\b0 The void(0) expression in JavaScript is used to evaluate an expression and return undefined. It is commonly used in HTML anchor (<a>) tags to prevent the browser from following the link when clicked. Here's how it works:\par
\par
Preventing Default Link Behavior:\par
<a href="javascript:void(0)">Click me</a>\par
When the user clicks the link, the browser executes void(0), which returns undefined, preventing the browser from navigating to a new page or executing any JavaScript code associated with the href.\par
\par
Example:\par
<!DOCTYPE html>\par
<html lang="en">\par
<head>\par
    <meta charset="UTF-8">\par
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\par
    <title>Void Example</title>\par
</head>\par
<body>\par
    <a href="javascript:void(0)" onclick="alert('Link clicked!')">Click me</a>\par
</body>\par
</html>\par
Other Use Cases:\par
Voiding the Result of an Expression:\par
void can be used to explicitly return undefined from an expression.\par
const result = void(0);\par
console.log(result); // undefined\par
Preventing Form Submission:\par
<form onsubmit="return void(0);">\par
    <!-- Form elements -->\par
    <input type="submit" value="Submit">\par
</form>\par
This prevents the form from being submitted.\par
Summary:\par
void(0) is used to evaluate an expression and return undefined.\par
It is often used to prevent the default behavior of HTML elements, especially anchor tags (<a>), to avoid navigating away or executing JavaScript code when clicked.\par
It can also be used to explicitly return undefined from an expression.\par
\bullet  How can a page be forced to load another page in JavaScript?\par
You can force a page to load another page in JavaScript by setting the window.location property to the URL of the page you want to load. There are several ways to achieve this:\par
Using window.location.href:\par
// Redirects the current page to the specified URL\par
window.location.href = '{{\field{\*\fldinst{HYPERLINK https://example.com/newpage.html }}{\fldrslt{https://example.com/newpage.html\ul0\cf0}}}}\f2\fs28 ';\par
Using window.location.replace():\par
// Replaces the current page with the specified URL in the browser history\par
window.location.replace('https://example.com/newpage.html');\par
Using window.location.assign():\par
// Loads the specified URL\par
window.location.assign('https://example.com/newpage.html');\par
Using <meta> Tag:\par
You can also use a <meta> tag in the <head> section of your HTML document to automatically redirect the page after a specified time:\par
\par
<meta http-equiv="refresh" content="5;url=https://example.com/newpage.html">\par
This will redirect to {{\field{\*\fldinst{HYPERLINK https://example.com/newpage.html }}{\fldrslt{https://example.com/newpage.html\ul0\cf0}}}}\f2\fs28  after 5 seconds.\par
\par
Using a Button Click:\par
You can also trigger the page redirection when a button is clicked:\par
\par
html\par
Copy code\par
<button onclick="redirectToPage()">Go to New Page</button>\par
\par
<script>\par
function redirectToPage() \{\par
    window.location.href = '{{\field{\*\fldinst{HYPERLINK https://example.com/newpage.html }}{\fldrslt{https://example.com/newpage.html\ul0\cf0}}}}\f2\fs28 ';\par
\}\par
</script>\par
Summary:\par
Use window.location.href, window.location.replace(), or window.location.assign() to force a page to load another page in JavaScript.\par
You can also use a <meta> tag for automatic redirection or trigger the redirection based on user actions like button clicks.\par
Remember that forcing a page redirection may interrupt user experience, so it should be used judiciously and with appropriate user consent or indication.\par
\bullet  What are the disadvantages of using innerHTML in JavaScript?\par
While innerHTML is a convenient and commonly used property in JavaScript for manipulating HTML content, it has some disadvantages:\par
\par
1. Security Risks:\par
Using innerHTML can expose your application to Cross-Site Scripting (XSS) attacks if you're inserting user-generated content into the page without proper sanitization.\par
const userInput = '<script>alert("XSS attack!");</script>';\par
element.innerHTML = userInput; // Executes the script\par
2. Performance Overhead:\par
Changing innerHTML of an element causes the browser to re-parse and re-render the entire content inside that element, which can be inefficient for large DOM structures. It's less efficient than directly manipulating the DOM.\par
\par
3. Event Handlers Lost:\par
If you set innerHTML to a new value that includes elements with event handlers, those event handlers will be lost. You would need to reattach the event handlers after setting innerHTML.\par
\par
4. Memory Leaks:\par
Manipulating innerHTML frequently can cause memory leaks in certain browsers, especially older versions of Internet Explorer.\par
\par
5. Overwrites Existing Content:\par
When you set innerHTML, it completely overwrites the existing content of the element, which might not be what you intend, especially if you just want to append or modify a small portion of the content.\par
\par
Example:\par
// Overwrites existing content\par
document.getElementById('myElement').innerHTML = '<p>New content</p>';\par
Alternatives:\par
DOM Manipulation Methods: Use native DOM manipulation methods like appendChild, \par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
 \par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\b\par
\par
\b0\par
\f0\lang9\par
\par
  \par
\par
}
 